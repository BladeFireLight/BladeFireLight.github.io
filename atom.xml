<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">



  <generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator>
  <link href="https://blog.bladefirelight.com/atom.xml" rel="self" type="application/atom+xml" />
  <link href="https://blog.bladefirelight.com/" rel="alternate" type="text/html" />
  <updated>2016-08-19T16:37:17-05:00</updated>
  <id>https://blog.bladefirelight.com/</id>

  <title>PowerShell Journey</title>

  
    <subtitle>Documenting my personal journey in powershell</subtitle>
  

  <icon>https://blog.bladefirelight.com/apple-touch-icon-precomposed.png</icon>


  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <entry>
  <title>Re-factoring the Blog</title>
  <link href="https://blog.bladefirelight.com/posts/Blog-Refactoring/" rel="alternate" type="text/html" title="Re-factoring the Blog" />
  <published>2016-04-02T00:00:00-05:00</published>

  
    <updated>2016-04-02T00:00:00-05:00</updated>
  

  <id>https://blog.bladefirelight.com/posts/Blog-Refactoring</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/posts/Blog-Refactoring/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Re-factoring the Blog&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;nav class=&quot;js-toc toc&quot;&gt;
  &lt;h4 class=&quot;toc__title&quot;&gt;Contents&lt;/h4&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#sometimes-rebooting-fixes-everything&quot; id=&quot;markdown-toc-sometimes-rebooting-fixes-everything&quot;&gt;Sometimes rebooting fixes everything&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enter-jekyll&quot; id=&quot;markdown-toc-enter-jekyll&quot;&gt;Enter Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-future&quot; id=&quot;markdown-toc-the-future&quot;&gt;The future.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;sometimes-rebooting-fixes-everything&quot;&gt;Sometimes rebooting fixes everything&lt;/h2&gt;

&lt;p&gt;After spending month after month on WidnowsImageTools and little else in my free time. My blog has been looking like abandonware. I had always planed to comeback, but there was always this nagging issue. WordPress. is a hosted service and cost money if you want more then the vanilla. And I had no interest in hosting WordPress else ware. It also was missing a plug-in that allowed you to to reference GitHub files directly. Copying code from a GitHub project into Gist seems like a major waste of time.&lt;/p&gt;

&lt;h2 id=&quot;enter-jekyll&quot;&gt;Enter Jekyll&lt;/h2&gt;

&lt;p&gt;About a month ago I listened to a podcast where they briefly mentioned github pages. This perked my interest. Partially because if was free, and partly because if was GitHub. (I also like the idea of bloging like a hacker).&lt;/p&gt;

&lt;p&gt;I figured if it was hosted on GitHub, surely they would have a easy way to reference a GitHub Repo. No such luck. The default plugins were somewhat limited. If I wanted unsupported plugins I had to compile the site locally. So I looked at all the plugins for Jekyll in Ruby Gems, I came across one that worked. However it only wanted to work in Jekyll version 1. I looked at the code on it’s GitHub repo and it looked to be an arbitrary requirement. So I set out the setup Jekyll on windows.&lt;/p&gt;

&lt;p&gt;I plan to write a full blog on the experience. There were many bumps and gatcha’s getting here, but I now can reference sections of GitHub Repos files in my posts, so it was worth it.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future.&lt;/h2&gt;

&lt;p&gt;I’m sitting in the airport waiting to head off to the PowerShell and DevOps Summit. I hope of have this blog launched, and material for some more posts, up and running before the week is out.&lt;/p&gt;


    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/posts/Blog-Refactoring/&quot; rel=&quot;nofollow&quot;&gt;Re-factoring the Blog&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="posts" />
  

  
    <category term="Blog" />
  
    <category term="Jekyll" />
  

  
    <summary type="text">  Contents  Sometimes rebooting fixes everything  Enter Jekyll  The future.Sometimes rebooting fixes everythingAfter spending month after month on WidnowsImageTools and little else in my free time. My blog has been looking like abandonware. I had always planed to comeback, but there was always this nagging issue. WordPress. is a hosted service and cost money if you want more then the vanilla. And I had no interest in hosting WordPress else ware. It also was missing a plug-in that allowed you to to reference GitHub files directly. Copying code from a GitHub project into Gist seems like a major waste of time.Enter JekyllAbout a month ago I listened to a podcast where they briefly mentioned github pages. This perked my interest. Partially because if was free, and partly because if was GitHub. (I also like the idea of bloging like a hacker).I figured if it was hosted on GitHub, surely they would have a easy way to reference a GitHub Repo. No such luck. The default plugins were somewhat limited. If I wanted unsupported plugins I had to compile the site locally. So I looked at all the plugins for Jekyll in Ruby Gems, I came across one that worked. However it only wanted to work in Jekyll version 1. I looked at the code on it’s GitHub repo and it looked to be an arbitrary requirement. So I set out the setup Jekyll on windows.I plan to write a full blog on the experience. There were many bumps and gatcha’s getting here, but I now can reference sections of GitHub Repos files in my posts, so it was worth it.The future.I’m sitting in the airport waiting to head off to the PowerShell and DevOps Summit. I hope of have this blog launched, and material for some more posts, up and running before the week is out.</summary>
  
</entry>

  
    <entry>
  <title>Windows Image Tools | Overview</title>
  <link href="https://blog.bladefirelight.com/projects/windowsimagetools/ImageCreation/" rel="alternate" type="text/html" title="Windows Image Tools \| Overview" />
  <published>2016-03-16T16:48:59-05:00</published>

  
    <updated>2016-03-16T16:48:59-05:00</updated>
  

  <id>https://blog.bladefirelight.com/projects/windowsimagetools/ImageCreation</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/projects/windowsimagetools/ImageCreation/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Windows Image Tools \| Overview&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;nav class=&quot;js-toc toc&quot;&gt;
  &lt;h4 class=&quot;toc__title&quot;&gt;Contents&lt;/h4&gt;

&lt;/nav&gt;


    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/projects/windowsimagetools/ImageCreation/&quot; rel=&quot;nofollow&quot;&gt;Windows Image Tools \| Overview&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="projects" />
  

  
    <category term="VHDX" />
  
    <category term="WindowsUpdate" />
  
    <category term="WindowsUpdateTools" />
  
    <category term="Module" />
  

  
    <summary type="text">One of the time consuming steps to deploying new VMs is the time spend managing Images and and applying patches. I’m not big on Golden images. I tend to use a fully patched VHDX or VMDK  and let DSC handle the configuration and software. This is not the fastest, and at scale you need to create more then one image based on what saves the most time.  (IIS, SQL, Exchange, etc…).</summary>
  
</entry>

  
    <entry>
  <title>Windows Image Tools | Overview</title>
  <link href="https://blog.bladefirelight.com/projects/windowsimagetools/windows-image-tools-overview/" rel="alternate" type="text/html" title="Windows Image Tools \| Overview" />
  <published>2016-03-16T16:48:59-05:00</published>

  
    <updated>2016-03-16T16:48:59-05:00</updated>
  

  <id>https://blog.bladefirelight.com/projects/windowsimagetools/windows-image-tools-overview</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/projects/windowsimagetools/windows-image-tools-overview/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Windows Image Tools \| Overview&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;nav class=&quot;js-toc toc&quot;&gt;
  &lt;h4 class=&quot;toc__title&quot;&gt;Contents&lt;/h4&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-problem&quot; id=&quot;markdown-toc-the-problem&quot;&gt;The problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-to-do-about-it&quot; id=&quot;markdown-toc-what-to-do-about-it&quot;&gt;What to do about it&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#why-a-module-why-not-a-script&quot; id=&quot;markdown-toc-why-a-module-why-not-a-script&quot;&gt;Why a Module, why not a script?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#functions-included-in-windowsimagetools&quot; id=&quot;markdown-toc-functions-included-in-windowsimagetools&quot;&gt;Functions included in WindowsImageTools&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#create-vhdx&quot; id=&quot;markdown-toc-create-vhdx&quot;&gt;Create VHDX&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#work-with-vhdx&quot; id=&quot;markdown-toc-work-with-vhdx&quot;&gt;Work with VHDX&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#update-vhdx&quot; id=&quot;markdown-toc-update-vhdx&quot;&gt;Update VHDX&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;One of the time consuming steps to deploying new VMs is the time spend managing Images and and applying patches. I’m not big on Golden images. I tend to use a fully patched VHDX or VMDK  and let DSC handle the configuration and software. This is not the fastest, and at scale you need to create more then one image based on what saves the most time.  (IIS, SQL, Exchange, etc…).&lt;/p&gt;

&lt;h2 id=&quot;what-to-do-about-it&quot;&gt;What to do about it&lt;/h2&gt;

&lt;p&gt;I have spend some time putting together a number of scripts to automate this, but after the release of windows 10 and it’s built in access to the galaxy I decided to look at updating and packaging my script into something portable and share it.&lt;/p&gt;

&lt;h3 id=&quot;why-a-module-why-not-a-script&quot;&gt;Why a Module, why not a script?&lt;/h3&gt;

&lt;p&gt;Well scripts are great for automating a process, but not the best when you want to customize for your own process. Say you use a script on the &lt;a href=&quot;https://www.powershellgallery.com/&quot;&gt;PowerShell Gallery&lt;/a&gt; and have customized it to fit your environment and business process. Then their is a bug fix posted to the gallery. You get the fun of adapting the changes into your modified code. This is time consuming, and the reason so many thing in production remain outdated and buggy. But if your using a customized controller script&lt;sup id=&quot;fnref:ControlerSsript&quot;&gt;&lt;a href=&quot;#fn:ControlerSsript&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; that relies on a module function, being able to use the newer release from the PowerShell Gallery is less painful.&lt;/p&gt;

&lt;p&gt;For that reason I have chosen to use a module and include a function that creates an example controller script.&lt;/p&gt;

&lt;h2 id=&quot;functions-included-in-windowsimagetools&quot;&gt;Functions included in WindowsImageTools&lt;/h2&gt;

&lt;p&gt;Functions cover three different areas, Creating VHDX, Manipulating them, and Updates.&lt;/p&gt;

&lt;h3 id=&quot;create-vhdx&quot;&gt;Create VHDX&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Initialize-VHDPartition
    &lt;ul&gt;
      &lt;li&gt;Create a VHD(x) with the partitions structure appropriate for the target generation of a VM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Set-VHDPartition
    &lt;ul&gt;
      &lt;li&gt;Populate the VHD(x) partitions with the content of an ISO or WIM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert-Wim2VHD
    &lt;ul&gt;
      &lt;li&gt;Wrapper combining Initialize-VHDPartition and Set-VHDPartition in a single function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;New-UnattendXml
    &lt;ul&gt;
      &lt;li&gt;Create an Unattent.xml to silently setup windows&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;work-with-vhdx&quot;&gt;Work with VHDX&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Get-VhdPartitionStyle
    &lt;ul&gt;
      &lt;li&gt;Returns GPT&lt;sup id=&quot;fnref:GPT&quot;&gt;&lt;a href=&quot;#fn:GPT&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; or MBR&lt;sup id=&quot;fnref:MBR&quot;&gt;&lt;a href=&quot;#fn:MBR&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mount-VhdAndRunBlock
    &lt;ul&gt;
      &lt;li&gt;Mounts a VHD(x) sets the letter of the first mount point to $driveLeter and invokes a script block. useful for manipulating  files inside a VHD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Invoke-CreateVmRunAndWait
    &lt;ul&gt;
      &lt;li&gt;Created a VM attached the VHD to it and waits for it to stop. Used for running boot time scripts that shut down when finished.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;update-vhdx&quot;&gt;Update VHDX&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;New-WindowsImageToolsExample
    &lt;ul&gt;
      &lt;li&gt;Creates an example folder structure and example controller scripts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Get-UpdateConfig
    &lt;ul&gt;
      &lt;li&gt;Gets the update configuration stored in the update folders. Contains VM Switch, and IP addresses needed to access the internet when running udpates.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Set-UpdateConfig
    &lt;ul&gt;
      &lt;li&gt;Change settings in the update configuration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Add-UpdateImage
    &lt;ul&gt;
      &lt;li&gt;Uses Convert-Wim2VHD and New-UnattendXml to prep a VHDX for updating&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Update-WindowsImageWMF
    &lt;ul&gt;
      &lt;li&gt;Update VHDX to WMF 4 or WMF 5&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Invoke-WindowsImageUpdate
    &lt;ul&gt;
      &lt;li&gt;For one VHDX or all VHD’s in update folder, run windows update and output WIM and optional VHDX&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ControlerSsript&quot;&gt;
      &lt;p&gt;A script that is specific to a business process &lt;a href=&quot;#fnref:ControlerSsript&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:GPT&quot;&gt;
      &lt;p&gt;GUID Partition Table. Used for Generation 2 and UEFI. will contain MSR, UEFI and Primary partition, may include options Recovery Tools and Recovery Image partitions &lt;a href=&quot;#fnref:GPT&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:MBR&quot;&gt;
      &lt;p&gt;Master Boot Record. Used for Generation 1 and Lagacy BIOS. Will use one Primary partition &lt;a href=&quot;#fnref:MBR&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/projects/windowsimagetools/windows-image-tools-overview/&quot; rel=&quot;nofollow&quot;&gt;Windows Image Tools \| Overview&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="projects" />
  

  
    <category term="VHDX" />
  
    <category term="WindowsUpdate" />
  
    <category term="WindowsUpdateTools" />
  
    <category term="Module" />
  

  
    <summary type="text">One of the time consuming steps to deploying new VMs is the time spend managing Images and and applying patches. I’m not big on Golden images. I tend to use a fully patched VHDX or VMDK  and let DSC handle the configuration and software. This is not the fastest, and at scale you need to create more then one image based on what saves the most time.  (IIS, SQL, Exchange, etc…).</summary>
  
</entry>

  
    <entry>
  <title>Shaving the Yak, Leads Me to Create New Module WindowsImageTools</title>
  <link href="https://blog.bladefirelight.com/posts/shaving-the-yak-leads-me-to-create-new-module-windowsimagetools/" rel="alternate" type="text/html" title="Shaving the Yak, Leads Me to Create New Module WindowsImageTools" />
  <published>2015-09-29T00:00:00-05:00</published>

  
    <updated>2015-09-29T00:00:00-05:00</updated>
  

  <id>https://blog.bladefirelight.com/posts/shaving-the-yak-leads-me-to-create-new-module-windowsimagetools</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/posts/shaving-the-yak-leads-me-to-create-new-module-windowsimagetools/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Shaving the Yak, Leads Me to Create New Module WindowsImageTools&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;nav class=&quot;js-toc toc&quot;&gt;
  &lt;h4 class=&quot;toc__title&quot;&gt;Contents&lt;/h4&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#my-yak-needs-shaving&quot; id=&quot;markdown-toc-my-yak-needs-shaving&quot;&gt;My Yak needs shaving.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#windowsimagetools&quot; id=&quot;markdown-toc-windowsimagetools&quot;&gt;WindowsImageTools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#onward&quot; id=&quot;markdown-toc-onward&quot;&gt;Onward&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;my-yak-needs-shaving&quot;&gt;My Yak needs shaving.&lt;/h2&gt;

&lt;p&gt;If your not familiar with the term.&lt;/p&gt;

&lt;p&gt;http://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspx&lt;/p&gt;

&lt;p&gt;It’s been quite a journey since my last post.&lt;/p&gt;

&lt;p&gt;Windows 10 came out, and Convert-WindowsImage.ps1 was upgraded (braking my scripts I blogged about this summer) and Server 2016 Preview 3 was released.&lt;/p&gt;

&lt;p&gt;Looking at the Nano folder on Preview 3 they are using a WIM and Convert-WindowsImage.ps1to create a VHDX. Good move Microsoft.&lt;/p&gt;

&lt;p&gt;Now for the bad part.&lt;/p&gt;

&lt;p&gt;Convert-WindowImage.ps1 is buggy, and not a module. But Microsoft is working hart to fix this. Not being one to wait. I decided to take the functionality I need and re-work the whole process as a module. (and found some underlying bugs in PowerShell in the process )  The results of my effort is documented below.&lt;/p&gt;

&lt;p&gt;As for Windows 10.&lt;/p&gt;

&lt;p&gt;There are a number of changes to DSC that have broken all my production configuration scripts. And Configurations created on Windows10 or WMF 5 preview have bugs when using depends on, that cause the LCM on 2012R2 to hang.&lt;/p&gt;

&lt;p&gt;For Production this is a show stopper, but I’m already working to separate out the configuration’s based on target OS.&lt;/p&gt;

&lt;h2 id=&quot;windowsimagetools&quot;&gt;WindowsImageTools&lt;/h2&gt;

&lt;p&gt;Microsoft recently moved Convert-WindowsImage over to GitHub and added some nice features, but it’s still a script, not a module. They also nicely added an MIT licence to that repo. So taking advantage of that I started my own project based on that code. I’m calling it WindowsImageTools&lt;/p&gt;

&lt;p&gt;So far there are four exported functions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize-VHDPartition
    &lt;ol&gt;
      &lt;li&gt;Create a VHD with correct partition for BIOS or UEFI with or without Recovery tools/image&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Set-VHDPartition
    &lt;ol&gt;
      &lt;li&gt;take an ISO or WIM and populate the VHD. This detects the layout and acts accordingly.&lt;/li&gt;
      &lt;li&gt;It also can add drivers, enable features, inject unattend.xml and inject additional files or folders&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert-Wim2VHD
    &lt;ol&gt;
      &lt;li&gt;This is a wrapper functions around the first two&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;New-UnattendXml
    &lt;ol&gt;
      &lt;li&gt;Create an Unattend.xml that works with both 32 and 64 bit in a single file&lt;/li&gt;
      &lt;li&gt;Sets the admin password and autologin count&lt;/li&gt;
      &lt;li&gt;Creates then deletes a second user (for Windows7)&lt;/li&gt;
      &lt;li&gt;Sets TimeZone&lt;/li&gt;
      &lt;li&gt;Starts a PowerShell script to bootstrap the system configuration&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That last one took quite some work to figure out. It only fully works with Volume media because it does not set the license key.&lt;/p&gt;

&lt;p&gt;I also discovered that 64bit windows will run both the 32bit sections for adding users and running scripts, but not the part for skipping licensing and autologin. This is true from win7 forward. If your not familiar with Unattend.xml those parts are all under the same section in the xml.&lt;/p&gt;

&lt;p&gt;If you want to give it a spin it’s &lt;a href=&quot;https://www.powershellgallery.com/packages/WindowsImageTools/&quot;&gt;available at the PowerShell Gallery&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;onward&quot;&gt;Onward&lt;/h2&gt;

&lt;p&gt;So equipped with these tools i’m now going to reword my auto patching and WIM creation script. and add that into the module.&lt;/p&gt;

    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/posts/shaving-the-yak-leads-me-to-create-new-module-windowsimagetools/&quot; rel=&quot;nofollow&quot;&gt;Shaving the Yak, Leads Me to Create New Module WindowsImageTools&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="posts" />
  

  
    <category term="Rant" />
  

  
    <summary type="text">  Contents  My Yak needs shaving.  WindowsImageTools  OnwardMy Yak needs shaving.If your not familiar with the term.http://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspxIt’s been quite a journey since my last post.Windows 10 came out, and Convert-WindowsImage.ps1 was upgraded (braking my scripts I blogged about this summer) and Server 2016 Preview 3 was released.Looking at the Nano folder on Preview 3 they are using a WIM and Convert-WindowsImage.ps1to create a VHDX. Good move Microsoft.Now for the bad part.Convert-WindowImage.ps1 is buggy, and not a module. But Microsoft is working hart to fix this. Not being one to wait. I decided to take the functionality I need and re-work the whole process as a module. (and found some underlying bugs in PowerShell in the process )  The results of my effort is documented below.As for Windows 10.There are a number of changes to DSC that have broken all my production configuration scripts. And Configurations created on Windows10 or WMF 5 preview have bugs when using depends on, that cause the LCM on 2012R2 to hang.For Production this is a show stopper, but I’m already working to separate out the configuration’s based on target OS.WindowsImageToolsMicrosoft recently moved Convert-WindowsImage over to GitHub and added some nice features, but it’s still a script, not a module. They also nicely added an MIT licence to that repo. So taking advantage of that I started my own project based on that code. I’m calling it WindowsImageToolsSo far there are four exported functions.  Initialize-VHDPartition          Create a VHD with correct partition for BIOS or UEFI with or without Recovery tools/image        Set-VHDPartition          take an ISO or WIM and populate the VHD. This detects the layout and acts accordingly.      It also can add drivers, enable features, inject unattend.xml and inject additional files or folders        Convert-Wim2VHD          This is a wrapper functions around the first two        New-UnattendXml          Create an Unattend.xml that works with both 32 and 64 bit in a single file      Sets the admin password and autologin count      Creates then deletes a second user (for Windows7)      Sets TimeZone      Starts a PowerShell script to bootstrap the system configuration      That last one took quite some work to figure out. It only fully works with Volume media because it does not set the license key.I also discovered that 64bit windows will run both the 32bit sections for adding users and running scripts, but not the part for skipping licensing and autologin. This is true from win7 forward. If your not familiar with Unattend.xml those parts are all under the same section in the xml.If you want to give it a spin it’s available at the PowerShell GalleryOnwardSo equipped with these tools i’m now going to reword my auto patching and WIM creation script. and add that into the module.</summary>
  
</entry>

  
    <entry>
  <title>Test-Lab | Update-GitHub</title>
  <link href="https://blog.bladefirelight.com/posts/test-lab-update-github/" rel="alternate" type="text/html" title="Test-Lab \| Update-GitHub" />
  <published>2015-05-06T00:00:00-05:00</published>

  
    <updated>2015-05-06T00:00:00-05:00</updated>
  

  <id>https://blog.bladefirelight.com/posts/test-lab-update-github</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/posts/test-lab-update-github/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Test-Lab \| Update-GitHub&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;h3 id=&quot;posts-in-this-series&quot;&gt;Posts in This series&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-homelab-inputobject-the-plan/&quot;&gt;Test-HomeLab -InputObject “The Plan”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/Get-Posh-Git-Test-Lab/&quot;&gt;Get-Posh-Git | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/get-dscframework-test-lab/&quot;&gt;Get-DSCFramework | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/invoke-dscbuild-test-lab/&quot;&gt;Invoke-DscBuild | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Test-Lab | Update-GitHub (This Post)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Last time we were able to get the sample DSC config to build. The problem is we had to modify the sample script and the instructions were not clear on the setup of the files.&lt;/p&gt;

&lt;p&gt;So to day I plan to update the SampleBuild.ps1, SampleConfiguration.psm1 and readme.md with my changes and submit a pull request.&lt;/p&gt;

&lt;p&gt;The first thing I’m going to modify is SampleConfiguration.psm1, now this file worked as is with the previous blog. but some of the things we did were to get arround an issue with this file.&lt;/p&gt;

&lt;p&gt;The line i’m talking about is here&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Import-Module DscConfiguration -ErrorAction Stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This imports a module that is already loaded by SampleBuild.ps1 but is also not in the path at this point of Invoke-DscBuild, unless the DscConfiguration module is added to a path in -ModulePath used by Invoke-DscBuild.  Now if your going to run import-module SampleConfiguration crate the ConfigurationData hash table your self and call SampleConfiguration then it makes sense to have that here. I don’t imagine anyone doing that but stranger things have happen, so I’m going to keep that line but wrap it in something to avoid the requirement of placing extra modules in DSC_Tools&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-not &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-Module DscConfiguration&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 Import-Module DscConfiguration -ErrorAction Stop
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This checks to see if DscConfiguration is already loaded into memory and skips the import is it is.&lt;/p&gt;

&lt;p&gt;Now I don’t need any modules in DSC_Tooling. Unless I have modules used by my scripts that I dont import prior to calling Invoke-DscBuild&lt;/p&gt;

&lt;p&gt;Next up is SampleBuild.ps1, I dont have any changes to make from what I did last time. so i will add that to my git repo in just a bit.&lt;/p&gt;

&lt;p&gt;Now Readme.md in the examples folder needs some serious work.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Example DSC Build
------

This folder contains some very basic examples of what a DSC configurationData folder structure, script, and call to Invoke-DscBuild might look like.  If you want to execute SampleBuild.ps1, there are a few dependencies you need to set up ahead of time:

- You must install all of the DSC tooling modules (content of \Tools minus the example folder) from this repository into your PSModulePath (typically into C:\Program Files\WindowsPowerShell\Modules\)
- You must also copy the Tooling\Examples\SampleConfiguration folder to the PSModulePath.
- You must copy [Pester](https://github.com/pester/Pester) (version 3.0.0 or later) and [ProtectedData](https://github.com/dlwyatt/ProtectedData) (version 2.1 or later) into the PSModulePath.
- You should create a DSC_Resources folder in the same directory as SampleBuild.ps1 and DSC_Configuration.  Copy the following modules into that DSC_Resources folder:
  - [StackExchangeResources](https://github.com/PowerShellOrg/StackExchangeResources)
  - [cWebAdministration](https://github.com/PowerShellOrg/cWebAdministration)
  - [cSmbShare](https://github.com/PowerShellOrg/cSmbShare)

Create a folder to place all the files into. i.e. c:\DSC, inside that folder create folders named BuildOutput, DSC_Configuration, DSC_Resorces, DSC_Script, DSC_Tooling. 

the folder structure should look like this
C:\DSC                # copy SampleBuild.ps1 here
+---BuldOutput        # Where the MOF files and ziped modules end up
+---DSC_Configuration # Copy \Tooling\Examples\DSC_Configuration\*  here
+---DSC_Resources     # copy StackExchangeResources, cSmbShare and cWebAdministration here
+---DSC_Script        # copy \Tooling\Examples\SampleConfiguration here
+---DSC_Tooling       # This is for any modules that may be used in a Configuration script, in the case of SampleConfiguration it would be empty.

If you plan on modifying SampleConfiguration.psm1 inside of DSC_Script you will also want to add the content of DSC_Modules to C:\Program Files\WindowsPowerShell\Modules\ but that is not necessary if your just building configurations that are authored on another machine. 

Once these dependencies are set up, you can execute SampleBuild.ps1.  It will run tests against the 3 modules in your DSC_Resources folder, compile your configuration into MOF documents, produce zip files for the resource modules, generate checksums for everything and copy them into BuildOutput

_Note:  The SampleBuild.ps1 file currently just dumps DSC_Tooling modules into the temporary folder, since I wasn&#39;t using that feature.  We&#39;ll build on these examples soon to show off some of the other functionality in the DscBuild and DscConfiguration modules, such as encrypting credentials in source control._
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you compare with my last post you will notice I removed the line about placing SampleConfguration into C:\Program Files\WindowsPowerShell\Modules. this path is no longer in the psmodulepath when inovke-DscBuild runs, as it used to be. This is due to needing to keep psmodulepath clean so that DSC_Resorces are accessible for configuration building but not necessarily needed.&lt;/p&gt;

&lt;p&gt;I also added a section showing the required folder structure and what each folder is used for, along with what needs to be done if your going to author on the same machine you build on.&lt;/p&gt;

&lt;p&gt;Now that that is done. I’m going to copy the files into C:\GitHub\PshOrgDSC\Tooling\Examples one at a time and add and commit changes.&lt;/p&gt;

&lt;p&gt;copy SampleConfiguration.psm1 first. Notice the prompt change thanks to posh-git, (you will not see the color change)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\GitHub\PshOrgDSC\Tooling\Examples\SampleConfiguration [development +0 ~1 -0]&amp;gt; git add *
 
C:\GitHub\PshOrgDSC\Tooling\Examples\SampleConfiguration [development +0 ~1 -0]&amp;gt; git commit -m &#39;Fixed issue with loading scamplescript moduel not loading if module is already loaded but no longer in path&#39;
[development a5301a8] Fixed issue with loading scamplescript moduel not loading if module is already loaded but no longer in path
 1 file changed, 3 insertions(+), 1 deletion(-)
 
C:\GitHub\PshOrgDSC\Tooling\Examples\SampleConfiguration [development]&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;next up SampleBuild.ps1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git add *
 
C:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git commit -m &#39;updated SampleBuild.ps1 to include missing value to invoke-DSCBuild. and added -verbose&#39;
[development 5c35462] updated SampleBuild.ps1 to include missing value to invoke-DSCBuild. and added -verbose
 1 file changed, 4 insertions(+), 3 deletions(-)
 
C:\GitHub\PshOrgDSC\Tooling\Examples [development]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;last up readme.md&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git add *
 
C:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git commit -m &#39;updated \Tooling\Example\Readme.md to match the current state of development, and included section showing required folder structure&#39;
[development 3aa570d] updated \Tooling\Example\Readme.md to match the current state of development, and included section showing required folder structure
 1 file changed, 14 insertions(+), 2 deletions(-)
 
C:\GitHub\PshOrgDSC\Tooling\Examples [development]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;finally I push the commits to my fork&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\GitHub\PshOrgDSC\Tooling\Examples [development]&amp;gt; git push
git : To https://github.com/BladeFireLight/DSC.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I can subit a pull request.&lt;/p&gt;

&lt;p&gt;I head over to github https://github.com/BladeFireLight/DSC/tree/development&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/compaireandpull.png&quot; alt=&quot;compaireandpull&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking Compare and pull request gives me a diff of each file and it’s changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/exampleDiff.png&quot; alt=&quot;exampleDiff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It also tells me there are no issues merging my commits into the upstream Development branch.&lt;/p&gt;

    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/posts/test-lab-update-github/&quot; rel=&quot;nofollow&quot;&gt;Test-Lab \| Update-GitHub&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="posts" />
  

  
    <category term="TestLab" />
  

  
    <summary type="text">Posts in This series  Test-HomeLab -InputObject “The Plan”  Get-Posh-Git | Test-Lab  Get-DSCFramework | Test-Lab  Invoke-DscBuild | Test-Lab  Test-Lab | Update-GitHub (This Post)Last time we were able to get the sample DSC config to build. The problem is we had to modify the sample script and the instructions were not clear on the setup of the files.So to day I plan to update the SampleBuild.ps1, SampleConfiguration.psm1 and readme.md with my changes and submit a pull request.The first thing I’m going to modify is SampleConfiguration.psm1, now this file worked as is with the previous blog. but some of the things we did were to get arround an issue with this file.The line i’m talking about is here Import-Module DscConfiguration -ErrorAction StopThis imports a module that is already loaded by SampleBuild.ps1 but is also not in the path at this point of Invoke-DscBuild, unless the DscConfiguration module is added to a path in -ModulePath used by Invoke-DscBuild.  Now if your going to run import-module SampleConfiguration crate the ConfigurationData hash table your self and call SampleConfiguration then it makes sense to have that here. I don’t imagine anyone doing that but stranger things have happen, so I’m going to keep that line but wrap it in something to avoid the requirement of placing extra modules in DSC_Toolsif (-not (Get-Module DscConfiguration)) { Import-Module DscConfiguration -ErrorAction Stop}This checks to see if DscConfiguration is already loaded into memory and skips the import is it is.Now I don’t need any modules in DSC_Tooling. Unless I have modules used by my scripts that I dont import prior to calling Invoke-DscBuildNext up is SampleBuild.ps1, I dont have any changes to make from what I did last time. so i will add that to my git repo in just a bit.Now Readme.md in the examples folder needs some serious work.Example DSC Build------This folder contains some very basic examples of what a DSC configurationData folder structure, script, and call to Invoke-DscBuild might look like.  If you want to execute SampleBuild.ps1, there are a few dependencies you need to set up ahead of time:- You must install all of the DSC tooling modules (content of \Tools minus the example folder) from this repository into your PSModulePath (typically into C:\Program Files\WindowsPowerShell\Modules\)- You must also copy the Tooling\Examples\SampleConfiguration folder to the PSModulePath.- You must copy [Pester](https://github.com/pester/Pester) (version 3.0.0 or later) and [ProtectedData](https://github.com/dlwyatt/ProtectedData) (version 2.1 or later) into the PSModulePath.- You should create a DSC_Resources folder in the same directory as SampleBuild.ps1 and DSC_Configuration.  Copy the following modules into that DSC_Resources folder:  - [StackExchangeResources](https://github.com/PowerShellOrg/StackExchangeResources)  - [cWebAdministration](https://github.com/PowerShellOrg/cWebAdministration)  - [cSmbShare](https://github.com/PowerShellOrg/cSmbShare)Create a folder to place all the files into. i.e. c:\DSC, inside that folder create folders named BuildOutput, DSC_Configuration, DSC_Resorces, DSC_Script, DSC_Tooling. the folder structure should look like thisC:\DSC                # copy SampleBuild.ps1 here+---BuldOutput        # Where the MOF files and ziped modules end up+---DSC_Configuration # Copy \Tooling\Examples\DSC_Configuration\*  here+---DSC_Resources     # copy StackExchangeResources, cSmbShare and cWebAdministration here+---DSC_Script        # copy \Tooling\Examples\SampleConfiguration here+---DSC_Tooling       # This is for any modules that may be used in a Configuration script, in the case of SampleConfiguration it would be empty.If you plan on modifying SampleConfiguration.psm1 inside of DSC_Script you will also want to add the content of DSC_Modules to C:\Program Files\WindowsPowerShell\Modules\ but that is not necessary if your just building configurations that are authored on another machine. Once these dependencies are set up, you can execute SampleBuild.ps1.  It will run tests against the 3 modules in your DSC_Resources folder, compile your configuration into MOF documents, produce zip files for the resource modules, generate checksums for everything and copy them into BuildOutput_Note:  The SampleBuild.ps1 file currently just dumps DSC_Tooling modules into the temporary folder, since I wasn&#39;t using that feature.  We&#39;ll build on these examples soon to show off some of the other functionality in the DscBuild and DscConfiguration modules, such as encrypting credentials in source control._If you compare with my last post you will notice I removed the line about placing SampleConfguration into C:\Program Files\WindowsPowerShell\Modules. this path is no longer in the psmodulepath when inovke-DscBuild runs, as it used to be. This is due to needing to keep psmodulepath clean so that DSC_Resorces are accessible for configuration building but not necessarily needed.I also added a section showing the required folder structure and what each folder is used for, along with what needs to be done if your going to author on the same machine you build on.Now that that is done. I’m going to copy the files into C:\GitHub\PshOrgDSC\Tooling\Examples one at a time and add and commit changes.copy SampleConfiguration.psm1 first. Notice the prompt change thanks to posh-git, (you will not see the color change)C:\GitHub\PshOrgDSC\Tooling\Examples\SampleConfiguration [development +0 ~1 -0]&amp;gt; git add * C:\GitHub\PshOrgDSC\Tooling\Examples\SampleConfiguration [development +0 ~1 -0]&amp;gt; git commit -m &#39;Fixed issue with loading scamplescript moduel not loading if module is already loaded but no longer in path&#39;[development a5301a8] Fixed issue with loading scamplescript moduel not loading if module is already loaded but no longer in path 1 file changed, 3 insertions(+), 1 deletion(-) C:\GitHub\PshOrgDSC\Tooling\Examples\SampleConfiguration [development]&amp;gt; next up SampleBuild.ps1C:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git add * C:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git commit -m &#39;updated SampleBuild.ps1 to include missing value to invoke-DSCBuild. and added -verbose&#39;[development 5c35462] updated SampleBuild.ps1 to include missing value to invoke-DSCBuild. and added -verbose 1 file changed, 4 insertions(+), 3 deletions(-) C:\GitHub\PshOrgDSC\Tooling\Examples [development]&amp;gt;last up readme.mdC:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git add * C:\GitHub\PshOrgDSC\Tooling\Examples [development +0 ~1 -0]&amp;gt; git commit -m &#39;updated \Tooling\Example\Readme.md to match the current state of development, and included section showing required folder structure&#39;[development 3aa570d] updated \Tooling\Example\Readme.md to match the current state of development, and included section showing required folder structure 1 file changed, 14 insertions(+), 2 deletions(-) C:\GitHub\PshOrgDSC\Tooling\Examples [development]&amp;gt;finally I push the commits to my forkC:\GitHub\PshOrgDSC\Tooling\Examples [development]&amp;gt; git pushgit : To https://github.com/BladeFireLight/DSC.gitNow I can subit a pull request.I head over to github https://github.com/BladeFireLight/DSC/tree/developmentClicking Compare and pull request gives me a diff of each file and it’s changes.It also tells me there are no issues merging my commits into the upstream Development branch.</summary>
  
</entry>

  
    <entry>
  <title>Invoke-DscBuild | Test-Lab</title>
  <link href="https://blog.bladefirelight.com/posts/invoke-dscbuild-test-lab/" rel="alternate" type="text/html" title="Invoke-DscBuild \| Test-Lab" />
  <published>2015-05-03T00:00:00-05:00</published>

  
    <updated>2015-05-03T00:00:00-05:00</updated>
  

  <id>https://blog.bladefirelight.com/posts/invoke-dscbuild-test-lab</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/posts/invoke-dscbuild-test-lab/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Invoke-DscBuild \| Test-Lab&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;h3 id=&quot;posts-in-this-series&quot;&gt;Posts in This series&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-homelab-inputobject-the-plan/&quot;&gt;Test-HomeLab -InputObject “The Plan”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/Get-Posh-Git-Test-Lab/&quot;&gt;Get-Posh-Git | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/get-dscframework-test-lab/&quot;&gt;Get-DSCFramework | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Invoke-DscBuild | Test-Lab (This Post)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-lab-update-github/&quot;&gt;Test-Lab | Update-GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the last post we forked a copy of the Powershell.org DSC tools and cloned a copy locally&lt;/p&gt;

&lt;p&gt;Today I’m going to get the example configuration working.&lt;/p&gt;

&lt;p&gt;Now looking at the README.md under examples seems straightforward, but I know for a fact that it’s missing a few steps.&lt;/p&gt;

&lt;p&gt;This folder contains some very basic examples of what a DSC configurationData folder structure, script, and call to Invoke-DscBuild might look like.  If you want to execute SampleBuild.ps1, there are a few dependencies you need to set up ahead of time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You must install all of the DSC tooling modules from this repository into your PSModulePath (typically into C:\Program Files\WindowsPowerShell\Modules)&lt;/li&gt;
  &lt;li&gt;You must also copy the Tooling\Examples\SampleConfiguration folder to the PSModulePath.&lt;/li&gt;
  &lt;li&gt;You must copy &lt;a href=&quot;https://github.com/pester/Pester&quot;&gt;Pester&lt;/a&gt; (version 3.0.0 or later) and &lt;a href=&quot;https://github.com/dlwyatt/ProtectedData&quot;&gt;ProtectedData&lt;/a&gt; (version 2.1 or later) into the PSModulePath.&lt;/li&gt;
  &lt;li&gt;You should create a DSC_Resources folder in the same directory as SampleBuild.ps1 and DSC_Configuration.  Copy the following modules into that DSC_Resources folder:&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PowerShellOrg/StackExchangeResources&quot;&gt;StackExchangeResources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PowerShellOrg/cWebAdministration&quot;&gt;cWebAdministration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PowerShellOrg/cSmbShare&quot;&gt;cSmbShare&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once these dependencies are set up, you can execute SampleBuild.ps1.  It will run tests against the 3 modules in your DSC_Resources folder, compile your configuration into MOF documents, produce zip files for the resource modules, generate checksums for everything and copy them into C:\Program Files\WindowsPowerShell\DscService\&lt;/p&gt;

&lt;p&gt;Looks like we are going to need a few more DSC resources. I’m going to go and fork/clone them just like before. (don’t forget to update the URL’s to match your own fork. )&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Download required files via Git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Next line not needed if you were following along with my last blog&lt;/span&gt;
git clone https://github.com/BladeFireLight/DSC.git c:&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;itHub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;shOrgDSC --branch development
git clone https://github.com/BladeFireLight/StackExchangeResources.git c:&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;itHub&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;tackExchangeResources
git clone https://github.com/BladeFireLight/cWebAdministration.git c:&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;itHub&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;WebAdministration
git clone https://github.com/BladeFireLight/cSmbShare.git c:&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;itHub&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;SmbShare 
git clone https://github.com/BladeFireLight/Pester c:&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;itHub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;ester
git clone https://github.com/BladeFireLight/ProtectedData.git c:&lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;itHub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;rotectedData
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I’m going to create some folder structure and place all the files where they need to go&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Create Folders&lt;/span&gt;
mkdir c:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC
&lt;/span&gt;mkdir C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\B&lt;/span&gt;uldOutput
mkdir C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Configuration
mkdir C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Resources
mkdir C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Script
mkdir C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Tooling
 
&lt;span class=&quot;c1&quot;&gt;#Copy Files&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;shOrgDSC&lt;span class=&quot;se&quot;&gt;\T&lt;/span&gt;ooling&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Tooling&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;-Exclude &lt;span class=&quot;s1&quot;&gt;&#39;examples&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;readme.md&#39;&lt;/span&gt; -Recurse
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;shOrgDSC&lt;span class=&quot;se&quot;&gt;\T&lt;/span&gt;ooling&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;C:\Program Files\WindowsPowerShell\Modules&#39;&lt;/span&gt; -Exclude &lt;span class=&quot;s1&quot;&gt;&#39;examples&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;readme.md&#39;&lt;/span&gt; -Recurse
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;C:\Program Files\WindowsPowerShell\Modules&#39;&lt;/span&gt; -Include &lt;span class=&quot;s1&quot;&gt;&#39;Pester&#39;&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;&#39;ProtectedData&#39;&lt;/span&gt; -Recurse
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Tooling&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;-Include &lt;span class=&quot;s1&quot;&gt;&#39;Pester&#39;&lt;/span&gt;,&lt;span class=&quot;s1&quot;&gt;&#39;ProtectedData&#39;&lt;/span&gt; -Recurse
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;shOrgDSC&lt;span class=&quot;se&quot;&gt;\T&lt;/span&gt;ooling&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;xamples&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;ampleBuild.ps1 c:&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;ampleBuild.ps1
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;c:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Resources -Include &lt;span class=&quot;s1&quot;&gt;&#39;cSmbShare&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;cWebAdministration&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;StackExchangeResources&#39;&lt;/span&gt; -Recurse
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;c:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;C:\Program Files\WindowsPowerShell\Modules&#39;&lt;/span&gt; -Include &lt;span class=&quot;s1&quot;&gt;&#39;cSmbShare&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;cWebAdministration&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;StackExchangeResources&#39;&lt;/span&gt; -Recurse
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;shOrgDSC&lt;span class=&quot;se&quot;&gt;\T&lt;/span&gt;ooling&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;xamples&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Configuration&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Configuration -Recurse
&lt;span class=&quot;nb&quot;&gt;copy &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\g&lt;/span&gt;ithub&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;shOrgDSC&lt;span class=&quot;se&quot;&gt;\T&lt;/span&gt;ooling&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;xamples&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;SC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;SC_Script -Include &lt;span class=&quot;s1&quot;&gt;&#39;SampleConfiguration&#39;&lt;/span&gt; -Recurse
 
&lt;span class=&quot;c1&quot;&gt;#delete unneeded folders. &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; -Path c:&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sc&lt;/span&gt; -Include &lt;span class=&quot;s1&quot;&gt;&#39;.git&#39;&lt;/span&gt; -Recurse | &lt;span class=&quot;nb&quot;&gt;del&lt;/span&gt; -Recurse -Force &lt;span class=&quot;c1&quot;&gt;#-Confirm:$false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; -Path &lt;span class=&quot;s1&quot;&gt;&#39;C:\Program Files\WindowsPowerShell\Modules&#39;&lt;/span&gt; -Include &lt;span class=&quot;s1&quot;&gt;&#39;.git&#39;&lt;/span&gt; -Recurse | &lt;span class=&quot;nb&quot;&gt;del&lt;/span&gt; -Recurse -Force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then result should give us a folder structure like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\DSC
├───BuldOutput
├───DSC_Configuration
│   ├───AllNodes
│   ├───Services
│   └───SiteData
├───DSC_Resources
│   ├───cSmbShare
│   │   └───DscResources
│   │       └───PSHOrg_cSmbShare
│   ├───cWebAdministration
│   │   ├───DSCResources
│   │   │   ├───PSHOrg_cAppPool
│   │   │   └───PSHOrg_cWebsite
│   │   └───Examples
│   └───StackExchangeResources
│       ├───DSCResources
│       │   ├───StackExchange_CertificateStore
│       │   ├───StackExchange_FirewallRule
│       │   ├───StackExchange_NetworkAdapter
│       │   ├───StackExchange_Pagefile
│       │   │   ├───StackExchange_en-US
│       │   │   └───StackExchange_nl-NL
│       │   ├───StackExchange_PowerPlan
│       │   │   └───StackExchange_en-US
│       │   ├───StackExchange_ScheduledTask
│       │   ├───StackExchange_SetExecutionPolicy
│       │   │   └───StackExchange_en-US
│       │   └───StackExchange_Timezone
│       └───test
│           ├───integration
│           │   └───StackExchange_PageFile
│           │       └───pester
│           └───unit
│               └───StackExchange_Pagefile
│                   └───pester
├───DSC_Script
│   └───SampleConfiguration
└───DSC_Tooling
    ├───cDscDiagnostics
    ├───cDscResourceDesigner
    ├───dscbuild
    ├───DscConfiguration
    ├───DscDevelopment
    ├───DscOperations
    ├───Pester
    │   ├───bin
    │   ├───en-US
    │   ├───Examples
    │   │   ├───Calculator
    │   │   └───Validator
    │   ├───Functions
    │   │   └───Assertions
    │   ├───Snippets
    │   └───vendor
    │       └───tools
    │           ├───OneGet
    │           │   └───Etc
    │           └───PowerShellGet
    │               └───en-US
    └───ProtectedData
        └───en-US

C:\PROGRAM FILES\WINDOWSPOWERSHELL\MODULES
├───cDscDiagnostics
├───cDscResourceDesigner
├───cSmbShare
│   └───DscResources
│       └───PSHOrg_cSmbShare
├───cWebAdministration
│   ├───DSCResources
│   │   ├───PSHOrg_cAppPool
│   │   └───PSHOrg_cWebsite
│   └───Examples
├───dscbuild
├───DscConfiguration
├───DscDevelopment
├───DscOperations
├───Pester
│   ├───bin
│   ├───en-US
│   ├───Examples
│   │   ├───Calculator
│   │   └───Validator
│   ├───Functions
│   │   └───Assertions
│   ├───Snippets
│   └───vendor
│       └───tools
│           ├───OneGet
│           │   └───Etc
│           └───PowerShellGet
│               └───en-US
├───ProtectedData
│   └───en-US
└───StackExchangeResources
    ├───DSCResources
    │   ├───StackExchange_CertificateStore
    │   ├───StackExchange_FirewallRule
    │   ├───StackExchange_NetworkAdapter
    │   ├───StackExchange_Pagefile
    │   │   ├───StackExchange_en-US
    │   │   └───StackExchange_nl-NL
    │   ├───StackExchange_PowerPlan
    │   │   └───StackExchange_en-US
    │   ├───StackExchange_ScheduledTask
    │   ├───StackExchange_SetExecutionPolicy
    │   │   └───StackExchange_en-US
    │   └───StackExchange_Timezone
    └───test
        ├───integration
        │   └───StackExchange_PageFile
        │       └───pester
        └───unit
            └───StackExchange_Pagefile
                └───pester
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;now lets fix C:\DSC\SampleBuild.ps1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    Import-Module Pester -ErrorAction Stop
    Import-Module dscbuild -ErrorAction Stop
    Import-Module dscconfiguration -ErrorAction Stop
 
    &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        WorkingDirectory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Get-TempDirectory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.FullName
        SourceResourceDirectory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PSScriptRoot&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SC_Resources&quot;&lt;/span&gt;
        SourceToolDirectory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PSScriptRoot&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SC_Tooling&quot;&lt;/span&gt;
        DestinationRootDirectory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PSScriptRoot&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\B&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uldOutput&quot;&lt;/span&gt;
        DestinationToolDirectory &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$env&lt;/span&gt;:TEMP
        ConfigurationData &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-DscConfigurationData -Path &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PSScriptRoot&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SC_Configuration&quot;&lt;/span&gt; -Force -verbose
        ModulePath &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PSScriptRoot&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SC_Script&quot;&lt;/span&gt;  , &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PSScriptRoot&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SC_Tooling&quot;&lt;/span&gt;
        ConfigurationModuleName &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;SampleConfiguration&#39;&lt;/span&gt;
        ConfigurationName &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;SampleConfiguration&#39;&lt;/span&gt;
        Configuration &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;
        Resource &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    Invoke-DscBuild @params -verbose
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;Get-TempDirectory
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CmdletBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OutputType&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;System.IO.DirectoryInfo]&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$tempDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Join-Path&lt;/span&gt; -Path &lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;System.IO.Path]::GetTempPath&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; -ChildPath &lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;System.IO.Path]::GetRandomFileName&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-not &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Test-Path&lt;/span&gt; -Path &lt;span class=&quot;nv&quot;&gt;$tempDir&lt;/span&gt; -PathType Container&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;New-Item&lt;/span&gt; -Path &lt;span class=&quot;nv&quot;&gt;$tempDir&lt;/span&gt; -ItemType Directory -ErrorAction Stop
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what is different?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DestinationRootDirectory = “$PSScriptRoot\BuldOutput”
    &lt;ul&gt;
      &lt;li&gt;Changed to point to a relative output. this is a test, so there is no need to place it into the common location for a pull server, although in production you may want to. I prefer to copy the files after a build, as it’s usually built on a machine other then the pull server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ConfigurationData = Get-DscConfigurationData -Path “$PSScriptRoot\DSC_Configuration” -Force -verbose
  *added verbose so I can see how its progresses and help with troubleshooting&lt;/li&gt;
  &lt;li&gt;ModulePath = “$PSScriptRoot\DSC_Script”  , “$PSScriptRoot\DSC_Tooling”
    &lt;ul&gt;
      &lt;li&gt;This is the big one. ModulePath and SourceResourceDirectory are going to be the only path’s in $psmodulepath when the configuration module (the module referenced by ConfigurationModuleName ) is loaded and when the configuration in ConfigurationName  is executed. This feature was added to resolve a problem when your modules used to build .mof files may be newer then the ones used to configure the machine running them. Something I ran into and Dave Wyatt was kind enough to solve&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Invoke-DscBuild @params -verbose
  *Added -verbose. I’m a bit of a verbose junky.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the updates to SampleBuild.ps1 we are ready to build our first sample set of .mof files&lt;/p&gt;

&lt;p&gt;I do this in a clean environment so I’m opening PowerShell as an administrator and running C:\DSC\SampleBuild.ps1. After a long bit of scrolling if it works the last few lines should look like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VERBOSE: Moving 718aec80-e8fe-41b5-ac31-fbcd5d0186b1.mof to C:\DSC\BuldOutput\Configuration
VERBOSE: Moving b4519959-9724-40d5-ab62-5c4f82bbcd80.mof to C:\DSC\BuldOutput\Configuration
VERBOSE: Moving fc107c0b-1fc8-45fb-9991-a0a1f0fd6c21.mof to C:\DSC\BuldOutput\Configuration
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Congratulations you have your first set of .mof files working with the PowerShell.org DSC tools.&lt;/p&gt;

&lt;p&gt;Next up. Creating a pull request to update the readme.md and SampleBuild.ps1&lt;/p&gt;

    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/posts/invoke-dscbuild-test-lab/&quot; rel=&quot;nofollow&quot;&gt;Invoke-DscBuild \| Test-Lab&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="posts" />
  

  
    <category term="TestLab" />
  

  
    <summary type="text">Posts in This series  Test-HomeLab -InputObject “The Plan”  Get-Posh-Git | Test-Lab  Get-DSCFramework | Test-Lab  Invoke-DscBuild | Test-Lab (This Post)  Test-Lab | Update-GitHubIn the last post we forked a copy of the Powershell.org DSC tools and cloned a copy locallyToday I’m going to get the example configuration working.Now looking at the README.md under examples seems straightforward, but I know for a fact that it’s missing a few steps.This folder contains some very basic examples of what a DSC configurationData folder structure, script, and call to Invoke-DscBuild might look like.  If you want to execute SampleBuild.ps1, there are a few dependencies you need to set up ahead of time:  You must install all of the DSC tooling modules from this repository into your PSModulePath (typically into C:\Program Files\WindowsPowerShell\Modules)  You must also copy the Tooling\Examples\SampleConfiguration folder to the PSModulePath.  You must copy Pester (version 3.0.0 or later) and ProtectedData (version 2.1 or later) into the PSModulePath.  You should create a DSC_Resources folder in the same directory as SampleBuild.ps1 and DSC_Configuration.  Copy the following modules into that DSC_Resources folder:  StackExchangeResources  cWebAdministration  cSmbShareOnce these dependencies are set up, you can execute SampleBuild.ps1.  It will run tests against the 3 modules in your DSC_Resources folder, compile your configuration into MOF documents, produce zip files for the resource modules, generate checksums for everything and copy them into C:\Program Files\WindowsPowerShell\DscService\Looks like we are going to need a few more DSC resources. I’m going to go and fork/clone them just like before. (don’t forget to update the URL’s to match your own fork. )# Download required files via Git#Next line not needed if you were following along with my last bloggit clone https://github.com/BladeFireLight/DSC.git c:\GitHub\PshOrgDSC --branch developmentgit clone https://github.com/BladeFireLight/StackExchangeResources.git c:\GitHub\StackExchangeResourcesgit clone https://github.com/BladeFireLight/cWebAdministration.git c:\GitHub\cWebAdministrationgit clone https://github.com/BladeFireLight/cSmbShare.git c:\GitHub\cSmbShare git clone https://github.com/BladeFireLight/Pester c:\GitHub\Pestergit clone https://github.com/BladeFireLight/ProtectedData.git c:\GitHub\ProtectedDataNow I’m going to create some folder structure and place all the files where they need to go#Create Foldersmkdir c:\DSCmkdir C:\DSC\BuldOutputmkdir C:\DSC\DSC_Configurationmkdir C:\DSC\DSC_Resourcesmkdir C:\DSC\DSC_Scriptmkdir C:\DSC\DSC_Tooling #Copy Filescopy C:\github\PshOrgDSC\Tooling\* C:\DSC\DSC_Tooling\ -Exclude &#39;examples&#39;, &#39;readme.md&#39; -Recursecopy C:\github\PshOrgDSC\Tooling\* &#39;C:\Program Files\WindowsPowerShell\Modules&#39; -Exclude &#39;examples&#39;, &#39;readme.md&#39; -Recursecopy C:\github\* &#39;C:\Program Files\WindowsPowerShell\Modules&#39; -Include &#39;Pester&#39;,&#39;ProtectedData&#39; -Recursecopy C:\github\* C:\DSC\DSC_Tooling\ -Include &#39;Pester&#39;,&#39;ProtectedData&#39; -Recursecopy C:\github\PshOrgDSC\Tooling\Examples\SampleBuild.ps1 c:\dsc\SampleBuild.ps1copy c:\github\* C:\DSC\DSC_Resources -Include &#39;cSmbShare&#39;, &#39;cWebAdministration&#39;, &#39;StackExchangeResources&#39; -Recursecopy c:\github\* &#39;C:\Program Files\WindowsPowerShell\Modules&#39; -Include &#39;cSmbShare&#39;, &#39;cWebAdministration&#39;, &#39;StackExchangeResources&#39; -Recursecopy C:\github\PshOrgDSC\Tooling\Examples\DSC_Configuration\* C:\DSC\DSC_Configuration -Recursecopy C:\github\PshOrgDSC\Tooling\Examples\* C:\DSC\DSC_Script -Include &#39;SampleConfiguration&#39; -Recurse #delete unneeded folders. dir -Path c:\dsc -Include &#39;.git&#39; -Recurse | del -Recurse -Force #-Confirm:$falsedir -Path &#39;C:\Program Files\WindowsPowerShell\Modules&#39; -Include &#39;.git&#39; -Recurse | del -Recurse -ForceThen result should give us a folder structure like thisC:\DSC├───BuldOutput├───DSC_Configuration│   ├───AllNodes│   ├───Services│   └───SiteData├───DSC_Resources│   ├───cSmbShare│   │   └───DscResources│   │       └───PSHOrg_cSmbShare│   ├───cWebAdministration│   │   ├───DSCResources│   │   │   ├───PSHOrg_cAppPool│   │   │   └───PSHOrg_cWebsite│   │   └───Examples│   └───StackExchangeResources│       ├───DSCResources│       │   ├───StackExchange_CertificateStore│       │   ├───StackExchange_FirewallRule│       │   ├───StackExchange_NetworkAdapter│       │   ├───StackExchange_Pagefile│       │   │   ├───StackExchange_en-US│       │   │   └───StackExchange_nl-NL│       │   ├───StackExchange_PowerPlan│       │   │   └───StackExchange_en-US│       │   ├───StackExchange_ScheduledTask│       │   ├───StackExchange_SetExecutionPolicy│       │   │   └───StackExchange_en-US│       │   └───StackExchange_Timezone│       └───test│           ├───integration│           │   └───StackExchange_PageFile│           │       └───pester│           └───unit│               └───StackExchange_Pagefile│                   └───pester├───DSC_Script│   └───SampleConfiguration└───DSC_Tooling    ├───cDscDiagnostics    ├───cDscResourceDesigner    ├───dscbuild    ├───DscConfiguration    ├───DscDevelopment    ├───DscOperations    ├───Pester    │   ├───bin    │   ├───en-US    │   ├───Examples    │   │   ├───Calculator    │   │   └───Validator    │   ├───Functions    │   │   └───Assertions    │   ├───Snippets    │   └───vendor    │       └───tools    │           ├───OneGet    │           │   └───Etc    │           └───PowerShellGet    │               └───en-US    └───ProtectedData        └───en-USC:\PROGRAM FILES\WINDOWSPOWERSHELL\MODULES├───cDscDiagnostics├───cDscResourceDesigner├───cSmbShare│   └───DscResources│       └───PSHOrg_cSmbShare├───cWebAdministration│   ├───DSCResources│   │   ├───PSHOrg_cAppPool│   │   └───PSHOrg_cWebsite│   └───Examples├───dscbuild├───DscConfiguration├───DscDevelopment├───DscOperations├───Pester│   ├───bin│   ├───en-US│   ├───Examples│   │   ├───Calculator│   │   └───Validator│   ├───Functions│   │   └───Assertions│   ├───Snippets│   └───vendor│       └───tools│           ├───OneGet│           │   └───Etc│           └───PowerShellGet│               └───en-US├───ProtectedData│   └───en-US└───StackExchangeResources    ├───DSCResources    │   ├───StackExchange_CertificateStore    │   ├───StackExchange_FirewallRule    │   ├───StackExchange_NetworkAdapter    │   ├───StackExchange_Pagefile    │   │   ├───StackExchange_en-US    │   │   └───StackExchange_nl-NL    │   ├───StackExchange_PowerPlan    │   │   └───StackExchange_en-US    │   ├───StackExchange_ScheduledTask    │   ├───StackExchange_SetExecutionPolicy    │   │   └───StackExchange_en-US    │   └───StackExchange_Timezone    └───test        ├───integration        │   └───StackExchange_PageFile        │       └───pester        └───unit            └───StackExchange_Pagefile                └───pesternow lets fix C:\DSC\SampleBuild.ps1end{    Import-Module Pester -ErrorAction Stop    Import-Module dscbuild -ErrorAction Stop    Import-Module dscconfiguration -ErrorAction Stop     $params = @{        WorkingDirectory = (Get-TempDirectory).FullName        SourceResourceDirectory = &quot;$PSScriptRoot\DSC_Resources&quot;        SourceToolDirectory = &quot;$PSScriptRoot\DSC_Tooling&quot;        DestinationRootDirectory = &quot;$PSScriptRoot\BuldOutput&quot;        DestinationToolDirectory = $env:TEMP        ConfigurationData = Get-DscConfigurationData -Path &quot;$PSScriptRoot\DSC_Configuration&quot; -Force -verbose        ModulePath = &quot;$PSScriptRoot\DSC_Script&quot;  , &quot;$PSScriptRoot\DSC_Tooling&quot;        ConfigurationModuleName = &#39;SampleConfiguration&#39;        ConfigurationName = &#39;SampleConfiguration&#39;        Configuration = $true        Resource = $true    }     Invoke-DscBuild @params -verbose} begin{    function Get-TempDirectory    {        [CmdletBinding()]        [OutputType([System.IO.DirectoryInfo])]        param ( )         do        {            $tempDir = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath ([System.IO.Path]::GetRandomFileName())        }        until (-not (Test-Path -Path $tempDir -PathType Container))         return New-Item -Path $tempDir -ItemType Directory -ErrorAction Stop    }}So what is different?  DestinationRootDirectory = “$PSScriptRoot\BuldOutput”          Changed to point to a relative output. this is a test, so there is no need to place it into the common location for a pull server, although in production you may want to. I prefer to copy the files after a build, as it’s usually built on a machine other then the pull server        ConfigurationData = Get-DscConfigurationData -Path “$PSScriptRoot\DSC_Configuration” -Force -verbose  *added verbose so I can see how its progresses and help with troubleshooting  ModulePath = “$PSScriptRoot\DSC_Script”  , “$PSScriptRoot\DSC_Tooling”          This is the big one. ModulePath and SourceResourceDirectory are going to be the only path’s in $psmodulepath when the configuration module (the module referenced by ConfigurationModuleName ) is loaded and when the configuration in ConfigurationName  is executed. This feature was added to resolve a problem when your modules used to build .mof files may be newer then the ones used to configure the machine running them. Something I ran into and Dave Wyatt was kind enough to solve        Invoke-DscBuild @params -verbose  *Added -verbose. I’m a bit of a verbose junky.With the updates to SampleBuild.ps1 we are ready to build our first sample set of .mof filesI do this in a clean environment so I’m opening PowerShell as an administrator and running C:\DSC\SampleBuild.ps1. After a long bit of scrolling if it works the last few lines should look like this.VERBOSE: Moving 718aec80-e8fe-41b5-ac31-fbcd5d0186b1.mof to C:\DSC\BuldOutput\ConfigurationVERBOSE: Moving b4519959-9724-40d5-ab62-5c4f82bbcd80.mof to C:\DSC\BuldOutput\ConfigurationVERBOSE: Moving fc107c0b-1fc8-45fb-9991-a0a1f0fd6c21.mof to C:\DSC\BuldOutput\ConfigurationCongratulations you have your first set of .mof files working with the PowerShell.org DSC tools.Next up. Creating a pull request to update the readme.md and SampleBuild.ps1</summary>
  
</entry>

  
    <entry>
  <title>Get-DSCFramework | Test-Lab</title>
  <link href="https://blog.bladefirelight.com/posts/get-dscframework-test-lab/" rel="alternate" type="text/html" title="Get-DSCFramework \| Test-Lab" />
  <published>2015-05-02T00:00:00-05:00</published>

  
    <updated>2015-05-02T00:00:00-05:00</updated>
  

  <id>https://blog.bladefirelight.com/posts/get-dscframework-test-lab</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/posts/get-dscframework-test-lab/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Get-DSCFramework \| Test-Lab&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;h3 id=&quot;posts-in-this-series&quot;&gt;Posts in This series&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-homelab-inputobject-the-plan/&quot;&gt;Test-HomeLab -InputObject “The Plan”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/Get-Posh-Git-Test-Lab/&quot;&gt;Get-Posh-Git | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Get-DSCFramework | Test-Lab (This Post)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/invoke-dscbuild-test-lab/&quot;&gt;Invoke-DscBuild | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-lab-update-github/&quot;&gt;Test-Lab | Update-GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the last post we got the posh-git installed, Now we are going to fork the Powershell.org DSC tools development branch and clone that locally.&lt;/p&gt;

&lt;p&gt;I already have an account with GitHub, You will need one to be able to contribute.&lt;/p&gt;

&lt;p&gt;I had over the the repository and click the fork button&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/fork.png&quot; alt=&quot;fork&quot; /&gt;&lt;/p&gt;

&lt;p&gt;with that done next is to get a copy of the clone URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/cloneurl.png&quot; alt=&quot;cloneurl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I create a folder to store the repository in&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\&amp;gt; mkdir github
    Directory: C:\
Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----          5/1/2015   5:25 PM            github

C:\&amp;gt; cd github
C:\github&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;now I have everything I need to make a clone.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\github&amp;gt; git clone https://github.com/BladeFireLight/DSC.git PshOrgDSC --branch development
git : Cloning into &#39;PshOrgDSC&#39;...
At line:1 char:1
+ git clone https://github.com/BladeFireLight/DSC.git PshOrgDSC --branch developme ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (Cloning into &#39;PshOrgDSC&#39;...:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError


C:\github&amp;gt; cd .\PshOrgDSC

C:\github\PshOrgDSC [development]&amp;gt; dir

    Directory: C:\github\PshOrgDSC

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----          5/1/2015   5:38 PM            Tooling
-a---          5/1/2015   5:38 PM        605 .gitattributes
-a---          5/1/2015   5:38 PM        366 .gitignore
-a---          5/1/2015   5:38 PM       1099 LICENSE.txt
-a---          5/1/2015   5:38 PM       1231 README.md
-a---          5/1/2015   5:38 PM       7305 README.old.md

C:\github\PshOrgDSC [development]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m not sure why PowerShell thought it was an error but the clone worked.&lt;/p&gt;

&lt;p&gt;Next up will be getting the example config to build.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\github\PshOrgDSC [development]&amp;gt; cd .\Tooling\Examples

C:\github\PshOrgDSC\Tooling\Examples [development]&amp;gt; dir

    Directory: C:\github\PshOrgDSC\Tooling\Examples

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----          5/1/2015   5:38 PM            DSC_Configuration
d----          5/1/2015   5:38 PM            SampleConfiguration
-a---          5/1/2015   5:38 PM       1770 README.md
-a---          5/1/2015   5:38 PM       1203 SampleBuild.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/posts/get-dscframework-test-lab/&quot; rel=&quot;nofollow&quot;&gt;Get-DSCFramework \| Test-Lab&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="posts" />
  

  
    <category term="TestLab" />
  

  
    <summary type="text">Posts in This series  Test-HomeLab -InputObject “The Plan”  Get-Posh-Git | Test-Lab  Get-DSCFramework | Test-Lab (This Post)  Invoke-DscBuild | Test-Lab  Test-Lab | Update-GitHubIn the last post we got the posh-git installed, Now we are going to fork the Powershell.org DSC tools development branch and clone that locally.I already have an account with GitHub, You will need one to be able to contribute.I had over the the repository and click the fork buttonwith that done next is to get a copy of the clone URL.I create a folder to store the repository inC:\&amp;gt; mkdir github    Directory: C:\Mode                LastWriteTime     Length Name----                -------------     ------ ----d----          5/1/2015   5:25 PM            githubC:\&amp;gt; cd githubC:\github&amp;gt;now I have everything I need to make a clone.C:\github&amp;gt; git clone https://github.com/BladeFireLight/DSC.git PshOrgDSC --branch developmentgit : Cloning into &#39;PshOrgDSC&#39;...At line:1 char:1+ git clone https://github.com/BladeFireLight/DSC.git PshOrgDSC --branch developme ...+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    + CategoryInfo          : NotSpecified: (Cloning into &#39;PshOrgDSC&#39;...:String) [], RemoteException    + FullyQualifiedErrorId : NativeCommandErrorC:\github&amp;gt; cd .\PshOrgDSCC:\github\PshOrgDSC [development]&amp;gt; dir    Directory: C:\github\PshOrgDSCMode                LastWriteTime     Length Name----                -------------     ------ ----d----          5/1/2015   5:38 PM            Tooling-a---          5/1/2015   5:38 PM        605 .gitattributes-a---          5/1/2015   5:38 PM        366 .gitignore-a---          5/1/2015   5:38 PM       1099 LICENSE.txt-a---          5/1/2015   5:38 PM       1231 README.md-a---          5/1/2015   5:38 PM       7305 README.old.mdC:\github\PshOrgDSC [development]&amp;gt;I’m not sure why PowerShell thought it was an error but the clone worked.Next up will be getting the example config to build.C:\github\PshOrgDSC [development]&amp;gt; cd .\Tooling\ExamplesC:\github\PshOrgDSC\Tooling\Examples [development]&amp;gt; dir    Directory: C:\github\PshOrgDSC\Tooling\ExamplesMode                LastWriteTime     Length Name----                -------------     ------ ----d----          5/1/2015   5:38 PM            DSC_Configurationd----          5/1/2015   5:38 PM            SampleConfiguration-a---          5/1/2015   5:38 PM       1770 README.md-a---          5/1/2015   5:38 PM       1203 SampleBuild.ps1</summary>
  
</entry>

  
    <entry>
  <title>Get-Posh-Git | Test-Lab</title>
  <link href="https://blog.bladefirelight.com/posts/Get-Posh-Git-Test-Lab/" rel="alternate" type="text/html" title="Get-Posh-Git \| Test-Lab" />
  <published>2015-04-30T00:00:00-05:00</published>

  
    <updated>2015-04-30T00:00:00-05:00</updated>
  

  <id>https://blog.bladefirelight.com/posts/Get-Posh-Git-Test-Lab</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/posts/Get-Posh-Git-Test-Lab/">
    

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/sample-image-1.jpg&quot; alt=&quot;Get-Posh-Git \| Test-Lab&quot; /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;h3 id=&quot;posts-in-this-series&quot;&gt;Posts in This series&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-homelab-inputobject-the-plan/&quot;&gt;Test-HomeLab -InputObject “The Plan”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Get-Posh-Git | Test-Lab (This Post)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/get-dscframework-test-lab/&quot;&gt;Get-DSCFramework | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/invoke-dscbuild-test-lab/&quot;&gt;Invoke-DscBuild | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-lab-update-github/&quot;&gt;Test-Lab | Update-GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My initial test lab starting to take shape.&lt;/p&gt;

&lt;p&gt;I have a vyos router bridging my production environment and my isolated virtual switch similar to what &lt;a href=&quot;http://powershell.org/wp/2015/03/25/home-labs-for-the-it-pro/&quot;&gt;Greg Altman talks about&lt;/a&gt; on PowerShell.org&lt;/p&gt;

&lt;p&gt;And I have one Windows 8.1 Pro VM to setup the &lt;a href=&quot;https://github.com/powershellorg/dsc/tree/development&quot;&gt;PowerShell.org DSC tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I’m going to get the development branch, as it has some major fixes, including a re-working of how modules are tested and package, and how passwords are stored.  The part on password is the big item for me.&lt;/p&gt;

&lt;p&gt;Now I could just download it via GitHub using IE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blog.bladefirelight.com/images/devbranch.png&quot; alt=&quot;DevBranch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But this blog is about giving back to the community so I’m going to using the GitHub client, and it’s included Posh-Git module for PowerShell.&lt;/p&gt;

&lt;p&gt;The GitHub client is a nice simple GUI client, but I have one issue with it. It installs into a users profile. While all store apps and downloaded .net apps do this and it’s a good thing for isolation. In a secure environment like where i work it’s frowned apon. So ifyour in that boat, Posh-Git can be downloaded from github and works with other git clients.&lt;/p&gt;

&lt;p&gt;Now I dont plan on using the GUI for the purpose of this blog so I’m going to change my PowerShell profile to load posh-git. GitHub client has to be ran once to create the files I use in my profile.&lt;/p&gt;

&lt;p&gt;The commands for that are.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#create/add posh-git to profile
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-not &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test-path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;split-path&lt;/span&gt; -Path &lt;span class=&quot;nv&quot;&gt;$profile&lt;/span&gt;.CurrentUserAllHosts -Parent&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
mkdir &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;split-path&lt;/span&gt; -Path &lt;span class=&quot;nv&quot;&gt;$profile&lt;/span&gt;.CurrentUserAllHosts -Parent&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&#39;. (Resolve-Path &quot;$env:LOCALAPPDATA\GitHub\shell.ps1&quot;)&#39;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;out-file&lt;/span&gt; -Path &lt;span class=&quot;nv&quot;&gt;$profile&lt;/span&gt;.CurrentUserAllHosts -Append
&lt;span class=&quot;s1&quot;&gt;&#39;. $env:github_posh_git\profile.example.ps1&#39;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;out-file&lt;/span&gt; -Path &lt;span class=&quot;nv&quot;&gt;$profile&lt;/span&gt;.CurrentUserAllHosts -Append&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;restart powershell and I can run get-module to see what modules are loaded.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;C:\&amp;gt; &lt;/span&gt;Get-Module
 
ModuleType Version    Name                                ExportedCommands
---------- -------    ----                                ----------------
Script     1.0.0.0    &lt;span class=&quot;nb&quot;&gt;ISE&lt;/span&gt;                                 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Get-IseSnippet, Import-IseSnippet, New-IseSnippet&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Manifest   3.1.0.0    Microsoft.PowerShell.Management     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Add-Computer, &lt;span class=&quot;nb&quot;&gt;Add-Content&lt;/span&gt;, Checkpoint-Computer, &lt;span class=&quot;nb&quot;&gt;Clear&lt;/span&gt;-Content...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Manifest   3.1.0.0    Microsoft.PowerShell.Utility        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Add-Member&lt;/span&gt;, Add-Type, &lt;span class=&quot;nb&quot;&gt;Clear-Variable&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Compare&lt;/span&gt;-Object...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Script     0.0        posh-git                            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Add-SshKey, Enable-GitColors, Get-AliasPattern, Get-GitDirectory...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we are ready to fork the PowerShell.org DSC repository and clone it locally.&lt;/p&gt;

    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/posts/Get-Posh-Git-Test-Lab/&quot; rel=&quot;nofollow&quot;&gt;Get-Posh-Git \| Test-Lab&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="posts" />
  

  
    <category term="TestLab" />
  

  
    <summary type="text">My initial test lab starting to take shape.</summary>
  
</entry>

  
    <entry>
  <title>Test-HomeLab -InputObject “The Plan”</title>
  <link href="https://blog.bladefirelight.com/posts/test-homelab-inputobject-the-plan/" rel="alternate" type="text/html" title="Test-HomeLab -InputObject &quot;The Plan&quot;" />
  <published>2015-04-27T00:00:00-05:00</published>

  
    <updated>2015-04-27T00:00:00-05:00</updated>
  

  <id>https://blog.bladefirelight.com/posts/test-homelab-inputobject-the-plan</id>
  <content type="html" xml:base="https://blog.bladefirelight.com/posts/test-homelab-inputobject-the-plan/">
    

&lt;p&gt;&amp;lt;img src=”https://blog.bladefirelight.com/images/sample-image-1.jpg” alt=”Test-HomeLab -InputObject “The Plan””&amp;gt;&lt;br /&gt;&lt;/p&gt;


    &lt;h3 id=&quot;posts-in-this-series&quot;&gt;Posts in This series&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Test-HomeLab -InputObject “The Plan” (This Post)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/Get-Posh-Git-Test-Lab/&quot;&gt;Get-Posh-Git | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/get-dscframework-test-lab/&quot;&gt;Get-DSCFramework | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/invoke-dscbuild-test-lab/&quot;&gt;Invoke-DscBuild | Test-Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/test-lab-update-github/&quot;&gt;Test-Lab | Update-GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;/h2&gt;

&lt;p&gt;What I intend to do is to create and in home test lab that I can use to test and develop DSC.  I’m basing my lab from &lt;a href=&quot;http://powershell.org/wp/2015/03/25/home-labs-for-the-it-pro/&quot;&gt;Greg Altman excellent post&lt;/a&gt; over on &lt;a href=&quot;http://powershell.org/&quot;&gt;PowerShell.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only exception I to this is that I have 2 machines to use a Hyper-V hosts. Now the second one I plan on installing Nano if/when it got into preview. Baring that I will use Hyper-V server 2012 R2.&lt;/p&gt;

&lt;p&gt;Now to keep the lab services into the virtual realm as Greg mentioned, &lt;em&gt;and&lt;/em&gt; use two hosts. I have spend the weekend trying to create a vyos VPN tunnel between two isolated networks.&lt;/p&gt;

&lt;p&gt;Needless to say not everything go according to plan. the Tunnel reports the link is up, but their is no traffic between network.&lt;/p&gt;

&lt;p&gt;I have already wasted most of the weekend on this, so I’m going to move forward for now with with out the VPN.  It’s not like I need it yet.&lt;/p&gt;

&lt;p&gt;So, onward.&lt;/p&gt;

&lt;p&gt;I’m going to first build a windows 8.1 dev PC by hand, and load the PowerShell.org DSC tooling on it. From there I can build configs for building a as much of the rest of the environment as possible.&lt;/p&gt;

&lt;p&gt;I hope to have a Pull Server, DC, PKI CA, up first, then move on to other servers that I can use to build resources for.&lt;/p&gt;

&lt;p&gt;I have been running DSC in production for the last year, and I hope I can share may experience via a how to for a test environment and how it relates back to problems in the enterprise.&lt;/p&gt;

    

&lt;p&gt;&lt;a href=&quot;https://blog.bladefirelight.com/posts/test-homelab-inputobject-the-plan/&quot; rel=&quot;nofollow&quot;&gt;Test-HomeLab -InputObject &quot;The Plan&quot;&lt;/a&gt; was originally published by &lt;a href=&quot;https://blog.bladefirelight.com/about/&quot; rel=&quot;nofollow&quot;&gt;David Jones&lt;/a&gt; on &lt;a href=&quot;https://blog.bladefirelight.com&quot; rel=&quot;nofollow&quot;&gt;PowerShell Journey&lt;/a&gt;&lt;/p&gt;


  </content>

  
  <author>
    
      <name>David Jones</name>
    
    
      <email>BladeFireLight@outlook.com</email>
    
    <uri>https://blog.bladefirelight.com/</uri>
  </author>



  
    <category term="posts" />
  

  
    <category term="TestLab" />
  

  
    <summary type="text">My Plan for a home test lab</summary>
  
</entry>

  

</feed>

