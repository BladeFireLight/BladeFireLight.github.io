var store = [{
        "title": "Test-HomeLab -InputObject \"The Plan\"",
        "excerpt":"Posts in This series   Test-HomeLab -InputObject “The Plan” (This Post)  Get-Posh-Git | Test-Lab  Get-DSCFramework | Test-Lab  Invoke-DscBuild | Test-Lab  Test-Lab | Update-GitHubThe Plan What I intend to do is to create and in home test lab that I can use to test and develop DSC.  I’m basing my lab from Greg Altman excellent post over on PowerShell.org The only exception I to this is that I have 2 machines to use a Hyper-V hosts. Now the second one I plan on installing Nano if/when it got into preview. Baring that I will use Hyper-V server 2012 R2. Now to keep the lab services into the virtual realm as Greg mentioned, and use two hosts. I have spend the weekend trying to create a vyos VPN tunnel between two isolated networks. Needless to say not everything go according to plan. the Tunnel reports the link is up, but their is no traffic between network. I have already wasted most of the weekend on this, so I’m going to move forward for now with with out the VPN.  It’s not like I need it yet. So, onward. I’m going to first build a windows 8.1 dev PC by hand, and load the PowerShell.org DSC tooling on it. From there I can build configs for building a as much of the rest of the environment as possible. I hope to have a Pull Server, DC, PKI CA, up first, then move on to other servers that I can use to build resources for. I have been running DSC in production for the last year, and I hope I can share may experience via a how to for a test environment and how it relates back to problems in the enterprise. ","categories": [],
        "tags": ["TestLab"],
        "url": "https://blog.bladefirelight.com/test-homelab-inputobject-the-plan/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Get-Posh-Git \\| Test-Lab",
        "excerpt":"Posts in This series   Test-HomeLab -InputObject “The Plan”  Get-Posh-Git | Test-Lab (This Post)  Get-DSCFramework | Test-Lab  Invoke-DscBuild | Test-Lab  Test-Lab | Update-GitHubMy initial test lab starting to take shape. I have a vyos router bridging my production environment and my isolated virtual switch similar to what Greg Altman talks about on PowerShell.org And I have one Windows 8.1 Pro VM to setup the PowerShell.org DSC tools Now I’m going to get the development branch, as it has some major fixes, including a re-working of how modules are tested and package, and how passwords are stored.  The part on password is the big item for me. Now I could just download it via GitHub using IE.  But this blog is about giving back to the community so I’m going to using the GitHub client, and it’s included Posh-Git module for PowerShell. The GitHub client is a nice simple GUI client, but I have one issue with it. It installs into a users profile. While all store apps and downloaded .net apps do this and it’s a good thing for isolation. In a secure environment like where i work it’s frowned apon. So ifyour in that boat, Posh-Git can be downloaded from github and works with other git clients. Now I dont plan on using the GUI for the purpose of this blog so I’m going to change my PowerShell profile to load posh-git. GitHub client has to be ran once to create the files I use in my profile. The commands for that are. #create/add posh-git to profileif (-not (test-path (split-path -Path $profile.CurrentUserAllHosts -Parent))){mkdir (split-path -Path $profile.CurrentUserAllHosts -Parent)}'. (Resolve-Path \"$env:LOCALAPPDATA\\GitHub\\shell.ps1\")' | out-file -Path $profile.CurrentUserAllHosts -Append'. $env:github_posh_git\\profile.example.ps1' | out-file -Path $profile.CurrentUserAllHosts -Appendrestart powershell and I can run get-module to see what modules are loaded. C:\\&gt; Get-Module ModuleType Version    Name                                ExportedCommands---------- -------    ----                                ----------------Script     1.0.0.0    ISE                                 {Get-IseSnippet, Import-IseSnippet, New-IseSnippet}Manifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}Manifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}Script     0.0        posh-git                            {Add-SshKey, Enable-GitColors, Get-AliasPattern, Get-GitDirectory...}Now we are ready to fork the PowerShell.org DSC repository and clone it locally. ","categories": [],
        "tags": ["TestLab"],
        "url": "https://blog.bladefirelight.com/Get-Posh-Git-Test-Lab/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Get-DSCFramework \\| Test-Lab",
        "excerpt":"Posts in This series   Test-HomeLab -InputObject “The Plan”  Get-Posh-Git | Test-Lab  Get-DSCFramework | Test-Lab (This Post)  Invoke-DscBuild | Test-Lab  Test-Lab | Update-GitHubIn the last post we got the posh-git installed, Now we are going to fork the Powershell.org DSC tools development branch and clone that locally. I already have an account with GitHub, You will need one to be able to contribute. I had over the the repository and click the fork button  with that done next is to get a copy of the clone URL.  I create a folder to store the repository in C:\\&gt; mkdir github    Directory: C:\\Mode                LastWriteTime     Length Name----                -------------     ------ ----d----          5/1/2015   5:25 PM            githubC:\\&gt; cd githubC:\\github&gt;now I have everything I need to make a clone. C:\\github&gt; git clone https://github.com/BladeFireLight/DSC.git PshOrgDSC --branch developmentgit : Cloning into 'PshOrgDSC'...At line:1 char:1+ git clone https://github.com/BladeFireLight/DSC.git PshOrgDSC --branch developme ...+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    + CategoryInfo          : NotSpecified: (Cloning into 'PshOrgDSC'...:String) [], RemoteException    + FullyQualifiedErrorId : NativeCommandErrorC:\\github&gt; cd .\\PshOrgDSCC:\\github\\PshOrgDSC [development]&gt; dir    Directory: C:\\github\\PshOrgDSCMode                LastWriteTime     Length Name----                -------------     ------ ----d----          5/1/2015   5:38 PM            Tooling-a---          5/1/2015   5:38 PM        605 .gitattributes-a---          5/1/2015   5:38 PM        366 .gitignore-a---          5/1/2015   5:38 PM       1099 LICENSE.txt-a---          5/1/2015   5:38 PM       1231 README.md-a---          5/1/2015   5:38 PM       7305 README.old.mdC:\\github\\PshOrgDSC [development]&gt;I’m not sure why PowerShell thought it was an error but the clone worked. Next up will be getting the example config to build. C:\\github\\PshOrgDSC [development]&gt; cd .\\Tooling\\ExamplesC:\\github\\PshOrgDSC\\Tooling\\Examples [development]&gt; dir    Directory: C:\\github\\PshOrgDSC\\Tooling\\ExamplesMode                LastWriteTime     Length Name----                -------------     ------ ----d----          5/1/2015   5:38 PM            DSC_Configurationd----          5/1/2015   5:38 PM            SampleConfiguration-a---          5/1/2015   5:38 PM       1770 README.md-a---          5/1/2015   5:38 PM       1203 SampleBuild.ps1","categories": [],
        "tags": ["TestLab"],
        "url": "https://blog.bladefirelight.com/get-dscframework-test-lab/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Invoke-DscBuild \\| Test-Lab",
        "excerpt":"Posts in This series   Test-HomeLab -InputObject “The Plan”  Get-Posh-Git | Test-Lab  Get-DSCFramework | Test-Lab  Invoke-DscBuild | Test-Lab (This Post)  Test-Lab | Update-GitHubIn the last post we forked a copy of the Powershell.org DSC tools and cloned a copy locally Today I’m going to get the example configuration working. Now looking at the README.md under examples seems straightforward, but I know for a fact that it’s missing a few steps. This folder contains some very basic examples of what a DSC configurationData folder structure, script, and call to Invoke-DscBuild might look like.  If you want to execute SampleBuild.ps1, there are a few dependencies you need to set up ahead of time:   You must install all of the DSC tooling modules from this repository into your PSModulePath (typically into C:\\Program Files\\WindowsPowerShell\\Modules)  You must also copy the Tooling\\Examples\\SampleConfiguration folder to the PSModulePath.  You must copy Pester (version 3.0.0 or later) and ProtectedData (version 2.1 or later) into the PSModulePath.  You should create a DSC_Resources folder in the same directory as SampleBuild.ps1 and DSC_Configuration.  Copy the following modules into that DSC_Resources folder:  StackExchangeResources  cWebAdministration  cSmbShareOnce these dependencies are set up, you can execute SampleBuild.ps1.  It will run tests against the 3 modules in your DSC_Resources folder, compile your configuration into MOF documents, produce zip files for the resource modules, generate checksums for everything and copy them into C:\\Program Files\\WindowsPowerShell\\DscService\\ Looks like we are going to need a few more DSC resources. I’m going to go and fork/clone them just like before. (don’t forget to update the URL’s to match your own fork. ) # Download required files via Git#Next line not needed if you were following along with my last bloggit clone https://github.com/BladeFireLight/DSC.git c:\\GitHub\\PshOrgDSC --branch developmentgit clone https://github.com/BladeFireLight/StackExchangeResources.git c:\\GitHub\\StackExchangeResourcesgit clone https://github.com/BladeFireLight/cWebAdministration.git c:\\GitHub\\cWebAdministrationgit clone https://github.com/BladeFireLight/cSmbShare.git c:\\GitHub\\cSmbSharegit clone https://github.com/BladeFireLight/Pester c:\\GitHub\\Pestergit clone https://github.com/BladeFireLight/ProtectedData.git c:\\GitHub\\ProtectedDataNow I’m going to create some folder structure and place all the files where they need to go #Create Foldersmkdir c:\\DSCmkdir C:\\DSC\\BuldOutputmkdir C:\\DSC\\DSC_Configurationmkdir C:\\DSC\\DSC_Resourcesmkdir C:\\DSC\\DSC_Scriptmkdir C:\\DSC\\DSC_Tooling#Copy Filescopy C:\\github\\PshOrgDSC\\Tooling\\* C:\\DSC\\DSC_Tooling\\ -Exclude 'examples', 'readme.md' -Recursecopy C:\\github\\PshOrgDSC\\Tooling\\* 'C:\\Program Files\\WindowsPowerShell\\Modules' -Exclude 'examples', 'readme.md' -Recursecopy C:\\github\\* 'C:\\Program Files\\WindowsPowerShell\\Modules' -Include 'Pester','ProtectedData' -Recursecopy C:\\github\\* C:\\DSC\\DSC_Tooling\\ -Include 'Pester','ProtectedData' -Recursecopy C:\\github\\PshOrgDSC\\Tooling\\Examples\\SampleBuild.ps1 c:\\dsc\\SampleBuild.ps1copy c:\\github\\* C:\\DSC\\DSC_Resources -Include 'cSmbShare', 'cWebAdministration', 'StackExchangeResources' -Recursecopy c:\\github\\* 'C:\\Program Files\\WindowsPowerShell\\Modules' -Include 'cSmbShare', 'cWebAdministration', 'StackExchangeResources' -Recursecopy C:\\github\\PshOrgDSC\\Tooling\\Examples\\DSC_Configuration\\* C:\\DSC\\DSC_Configuration -Recursecopy C:\\github\\PshOrgDSC\\Tooling\\Examples\\* C:\\DSC\\DSC_Script -Include 'SampleConfiguration' -Recurse#delete unneeded folders.dir -Path c:\\dsc -Include '.git' -Recurse | del -Recurse -Force #-Confirm:$falsedir -Path 'C:\\Program Files\\WindowsPowerShell\\Modules' -Include '.git' -Recurse | del -Recurse -ForceThen result should give us a folder structure like this C:\\DSC├───BuldOutput├───DSC_Configuration│   ├───AllNodes│   ├───Services│   └───SiteData├───DSC_Resources│   ├───cSmbShare│   │   └───DscResources│   │       └───PSHOrg_cSmbShare│   ├───cWebAdministration│   │   ├───DSCResources│   │   │   ├───PSHOrg_cAppPool│   │   │   └───PSHOrg_cWebsite│   │   └───Examples│   └───StackExchangeResources│       ├───DSCResources│       │   ├───StackExchange_CertificateStore│       │   ├───StackExchange_FirewallRule│       │   ├───StackExchange_NetworkAdapter│       │   ├───StackExchange_Pagefile│       │   │   ├───StackExchange_en-US│       │   │   └───StackExchange_nl-NL│       │   ├───StackExchange_PowerPlan│       │   │   └───StackExchange_en-US│       │   ├───StackExchange_ScheduledTask│       │   ├───StackExchange_SetExecutionPolicy│       │   │   └───StackExchange_en-US│       │   └───StackExchange_Timezone│       └───test│           ├───integration│           │   └───StackExchange_PageFile│           │       └───pester│           └───unit│               └───StackExchange_Pagefile│                   └───pester├───DSC_Script│   └───SampleConfiguration└───DSC_Tooling    ├───cDscDiagnostics    ├───cDscResourceDesigner    ├───dscbuild    ├───DscConfiguration    ├───DscDevelopment    ├───DscOperations    ├───Pester    │   ├───bin    │   ├───en-US    │   ├───Examples    │   │   ├───Calculator    │   │   └───Validator    │   ├───Functions    │   │   └───Assertions    │   ├───Snippets    │   └───vendor    │       └───tools    │           ├───OneGet    │           │   └───Etc    │           └───PowerShellGet    │               └───en-US    └───ProtectedData        └───en-USC:\\PROGRAM FILES\\WINDOWSPOWERSHELL\\MODULES├───cDscDiagnostics├───cDscResourceDesigner├───cSmbShare│   └───DscResources│       └───PSHOrg_cSmbShare├───cWebAdministration│   ├───DSCResources│   │   ├───PSHOrg_cAppPool│   │   └───PSHOrg_cWebsite│   └───Examples├───dscbuild├───DscConfiguration├───DscDevelopment├───DscOperations├───Pester│   ├───bin│   ├───en-US│   ├───Examples│   │   ├───Calculator│   │   └───Validator│   ├───Functions│   │   └───Assertions│   ├───Snippets│   └───vendor│       └───tools│           ├───OneGet│           │   └───Etc│           └───PowerShellGet│               └───en-US├───ProtectedData│   └───en-US└───StackExchangeResources    ├───DSCResources    │   ├───StackExchange_CertificateStore    │   ├───StackExchange_FirewallRule    │   ├───StackExchange_NetworkAdapter    │   ├───StackExchange_Pagefile    │   │   ├───StackExchange_en-US    │   │   └───StackExchange_nl-NL    │   ├───StackExchange_PowerPlan    │   │   └───StackExchange_en-US    │   ├───StackExchange_ScheduledTask    │   ├───StackExchange_SetExecutionPolicy    │   │   └───StackExchange_en-US    │   └───StackExchange_Timezone    └───test        ├───integration        │   └───StackExchange_PageFile        │       └───pester        └───unit            └───StackExchange_Pagefile                └───pesternow lets fix C:\\DSC\\SampleBuild.ps1 end{    Import-Module Pester -ErrorAction Stop    Import-Module dscbuild -ErrorAction Stop    Import-Module dscconfiguration -ErrorAction Stop    $params = @{        WorkingDirectory = (Get-TempDirectory).FullName        SourceResourceDirectory = \"$PSScriptRoot\\DSC_Resources\"        SourceToolDirectory = \"$PSScriptRoot\\DSC_Tooling\"        DestinationRootDirectory = \"$PSScriptRoot\\BuldOutput\"        DestinationToolDirectory = $env:TEMP        ConfigurationData = Get-DscConfigurationData -Path \"$PSScriptRoot\\DSC_Configuration\" -Force -verbose        ModulePath = \"$PSScriptRoot\\DSC_Script\"  , \"$PSScriptRoot\\DSC_Tooling\"        ConfigurationModuleName = 'SampleConfiguration'        ConfigurationName = 'SampleConfiguration'        Configuration = $true        Resource = $true    }    Invoke-DscBuild @params -verbose}begin{    function Get-TempDirectory    {        [CmdletBinding()]        [OutputType([System.IO.DirectoryInfo])]        param ( )        do        {            $tempDir = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath ([System.IO.Path]::GetRandomFileName())        }        until (-not (Test-Path -Path $tempDir -PathType Container))        return New-Item -Path $tempDir -ItemType Directory -ErrorAction Stop    }}So what is different?   DestinationRootDirectory = “$PSScriptRoot\\BuldOutput”          Changed to point to a relative output. this is a test, so there is no need to place it into the common location for a pull server, although in production you may want to. I prefer to copy the files after a build, as it’s usually built on a machine other then the pull server        ConfigurationData = Get-DscConfigurationData -Path “$PSScriptRoot\\DSC_Configuration” -Force -verbose  *added verbose so I can see how its progresses and help with troubleshooting  ModulePath = “$PSScriptRoot\\DSC_Script”  , “$PSScriptRoot\\DSC_Tooling”          This is the big one. ModulePath and SourceResourceDirectory are going to be the only path’s in $psmodulepath when the configuration module (the module referenced by ConfigurationModuleName ) is loaded and when the configuration in ConfigurationName  is executed. This feature was added to resolve a problem when your modules used to build .mof files may be newer then the ones used to configure the machine running them. Something I ran into and Dave Wyatt was kind enough to solve        Invoke-DscBuild @params -verbose  *Added -verbose. I’m a bit of a verbose junky.With the updates to SampleBuild.ps1 we are ready to build our first sample set of .mof files I do this in a clean environment so I’m opening PowerShell as an administrator and running C:\\DSC\\SampleBuild.ps1. After a long bit of scrolling if it works the last few lines should look like this. VERBOSE: Moving 718aec80-e8fe-41b5-ac31-fbcd5d0186b1.mof to C:\\DSC\\BuldOutput\\ConfigurationVERBOSE: Moving b4519959-9724-40d5-ab62-5c4f82bbcd80.mof to C:\\DSC\\BuldOutput\\ConfigurationVERBOSE: Moving fc107c0b-1fc8-45fb-9991-a0a1f0fd6c21.mof to C:\\DSC\\BuldOutput\\ConfigurationCongratulations you have your first set of .mof files working with the PowerShell.org DSC tools. Next up. Creating a pull request to update the readme.md and SampleBuild.ps1 ","categories": [],
        "tags": ["TestLab"],
        "url": "https://blog.bladefirelight.com/invoke-dscbuild-test-lab/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Test-Lab \\| Update-GitHub",
        "excerpt":"Posts in This series   Test-HomeLab -InputObject “The Plan”  Get-Posh-Git | Test-Lab  Get-DSCFramework | Test-Lab  Invoke-DscBuild | Test-Lab  Test-Lab | Update-GitHub (This Post)Last time we were able to get the sample DSC config to build. The problem is we had to modify the sample script and the instructions were not clear on the setup of the files. So to day I plan to update the SampleBuild.ps1, SampleConfiguration.psm1 and readme.md with my changes and submit a pull request. The first thing I’m going to modify is SampleConfiguration.psm1, now this file worked as is with the previous blog. but some of the things we did were to get arround an issue with this file. The line i’m talking about is here  Import-Module DscConfiguration -ErrorAction StopThis imports a module that is already loaded by SampleBuild.ps1 but is also not in the path at this point of Invoke-DscBuild, unless the DscConfiguration module is added to a path in -ModulePath used by Invoke-DscBuild.  Now if your going to run import-module SampleConfiguration crate the ConfigurationData hash table your self and call SampleConfiguration then it makes sense to have that here. I don’t imagine anyone doing that but stranger things have happen, so I’m going to keep that line but wrap it in something to avoid the requirement of placing extra modules in DSC_Tools if (-not (Get-Module DscConfiguration)) { Import-Module DscConfiguration -ErrorAction Stop}This checks to see if DscConfiguration is already loaded into memory and skips the import is it is. Now I don’t need any modules in DSC_Tooling. Unless I have modules used by my scripts that I dont import prior to calling Invoke-DscBuild Next up is SampleBuild.ps1, I dont have any changes to make from what I did last time. so i will add that to my git repo in just a bit. Now Readme.md in the examples folder needs some serious work. Example DSC Build------This folder contains some very basic examples of what a DSC configurationData folder structure, script, and call to Invoke-DscBuild might look like.  If you want to execute SampleBuild.ps1, there are a few dependencies you need to set up ahead of time:- You must install all of the DSC tooling modules (content of \\Tools minus the example folder) from this repository into your PSModulePath (typically into C:\\Program Files\\WindowsPowerShell\\Modules\\)- You must also copy the Tooling\\Examples\\SampleConfiguration folder to the PSModulePath.- You must copy [Pester](https://github.com/pester/Pester) (version 3.0.0 or later) and [ProtectedData](https://github.com/dlwyatt/ProtectedData) (version 2.1 or later) into the PSModulePath.- You should create a DSC_Resources folder in the same directory as SampleBuild.ps1 and DSC_Configuration.  Copy the following modules into that DSC_Resources folder:  - [StackExchangeResources](https://github.com/PowerShellOrg/StackExchangeResources)  - [cWebAdministration](https://github.com/PowerShellOrg/cWebAdministration)  - [cSmbShare](https://github.com/PowerShellOrg/cSmbShare)Create a folder to place all the files into. i.e. c:\\DSC, inside that folder create folders named BuildOutput, DSC_Configuration, DSC_Resorces, DSC_Script, DSC_Tooling.the folder structure should look like thisC:\\DSC                # copy SampleBuild.ps1 here+---BuldOutput        # Where the MOF files and ziped modules end up+---DSC_Configuration # Copy \\Tooling\\Examples\\DSC_Configuration\\*  here+---DSC_Resources     # copy StackExchangeResources, cSmbShare and cWebAdministration here+---DSC_Script        # copy \\Tooling\\Examples\\SampleConfiguration here+---DSC_Tooling       # This is for any modules that may be used in a Configuration script, in the case of SampleConfiguration it would be empty.If you plan on modifying SampleConfiguration.psm1 inside of DSC_Script you will also want to add the content of DSC_Modules to C:\\Program Files\\WindowsPowerShell\\Modules\\ but that is not necessary if your just building configurations that are authored on another machine.Once these dependencies are set up, you can execute SampleBuild.ps1.  It will run tests against the 3 modules in your DSC_Resources folder, compile your configuration into MOF documents, produce zip files for the resource modules, generate checksums for everything and copy them into BuildOutput_Note:  The SampleBuild.ps1 file currently just dumps DSC_Tooling modules into the temporary folder, since I wasn't using that feature.  We'll build on these examples soon to show off some of the other functionality in the DscBuild and DscConfiguration modules, such as encrypting credentials in source control._If you compare with my last post you will notice I removed the line about placing SampleConfguration into C:\\Program Files\\WindowsPowerShell\\Modules. this path is no longer in the psmodulepath when inovke-DscBuild runs, as it used to be. This is due to needing to keep psmodulepath clean so that DSC_Resorces are accessible for configuration building but not necessarily needed. I also added a section showing the required folder structure and what each folder is used for, along with what needs to be done if your going to author on the same machine you build on. Now that that is done. I’m going to copy the files into C:\\GitHub\\PshOrgDSC\\Tooling\\Examples one at a time and add and commit changes. copy SampleConfiguration.psm1 first. Notice the prompt change thanks to posh-git, (you will not see the color change) C:\\GitHub\\PshOrgDSC\\Tooling\\Examples\\SampleConfiguration [development +0 ~1 -0]&gt; git add *C:\\GitHub\\PshOrgDSC\\Tooling\\Examples\\SampleConfiguration [development +0 ~1 -0]&gt; git commit -m 'Fixed issue with loading scamplescript moduel not loading if module is already loaded but no longer in path'[development a5301a8] Fixed issue with loading scamplescript moduel not loading if module is already loaded but no longer in path 1 file changed, 3 insertions(+), 1 deletion(-)C:\\GitHub\\PshOrgDSC\\Tooling\\Examples\\SampleConfiguration [development]&gt;next up SampleBuild.ps1 C:\\GitHub\\PshOrgDSC\\Tooling\\Examples [development +0 ~1 -0]&gt; git add *C:\\GitHub\\PshOrgDSC\\Tooling\\Examples [development +0 ~1 -0]&gt; git commit -m 'updated SampleBuild.ps1 to include missing value to invoke-DSCBuild. and added -verbose'[development 5c35462] updated SampleBuild.ps1 to include missing value to invoke-DSCBuild. and added -verbose 1 file changed, 4 insertions(+), 3 deletions(-)C:\\GitHub\\PshOrgDSC\\Tooling\\Examples [development]&gt;last up readme.md C:\\GitHub\\PshOrgDSC\\Tooling\\Examples [development +0 ~1 -0]&gt; git add *C:\\GitHub\\PshOrgDSC\\Tooling\\Examples [development +0 ~1 -0]&gt; git commit -m 'updated \\Tooling\\Example\\Readme.md to match the current state of development, and included section showing required folder structure'[development 3aa570d] updated \\Tooling\\Example\\Readme.md to match the current state of development, and included section showing required folder structure 1 file changed, 14 insertions(+), 2 deletions(-)C:\\GitHub\\PshOrgDSC\\Tooling\\Examples [development]&gt;finally I push the commits to my fork C:\\GitHub\\PshOrgDSC\\Tooling\\Examples [development]&gt; git pushgit : To https://github.com/BladeFireLight/DSC.gitNow I can subit a pull request. I head over to github https://github.com/BladeFireLight/DSC/tree/development  Clicking Compare and pull request gives me a diff of each file and it’s changes.  It also tells me there are no issues merging my commits into the upstream Development branch. ","categories": [],
        "tags": ["TestLab"],
        "url": "https://blog.bladefirelight.com/test-lab-update-github/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Shaving the Yak, Leads Me to Create New Module WindowsImageTools",
        "excerpt":"My Yak needs shaving. If your not familiar with the term. http://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspx It’s been quite a journey since my last post. Windows 10 came out, and Convert-WindowsImage.ps1 was upgraded (braking my scripts I blogged about this summer) and Server 2016 Preview 3 was released. Looking at the Nano folder on Preview 3 they are using a WIM and Convert-WindowsImage.ps1to create a VHDX. Good move Microsoft. Now for the bad part. Convert-WindowImage.ps1 is buggy, and not a module. But Microsoft is working hart to fix this. Not being one to wait. I decided to take the functionality I need and re-work the whole process as a module. (and found some underlying bugs in PowerShell in the process )  The results of my effort is documented below. As for Windows 10. There are a number of changes to DSC that have broken all my production configuration scripts. And Configurations created on Windows10 or WMF 5 preview have bugs when using depends on, that cause the LCM on 2012R2 to hang. For Production this is a show stopper, but I’m already working to separate out the configuration’s based on target OS. WindowsImageTools Microsoft recently moved Convert-WindowsImage over to GitHub and added some nice features, but it’s still a script, not a module. They also nicely added an MIT licence to that repo. So taking advantage of that I started my own project based on that code. I’m calling it WindowsImageTools So far there are four exported functions.   Initialize-VHDPartition          Create a VHD with correct partition for BIOS or UEFI with or without Recovery tools/image        Set-VHDPartition          take an ISO or WIM and populate the VHD. This detects the layout and acts accordingly.      It also can add drivers, enable features, inject unattend.xml and inject additional files or folders        Convert-Wim2VHD          This is a wrapper functions around the first two        New-UnattendXml          Create an Unattend.xml that works with both 32 and 64 bit in a single file      Sets the admin password and autologin count      Creates then deletes a second user (for Windows7)      Sets TimeZone      Starts a PowerShell script to bootstrap the system configuration      That last one took quite some work to figure out. It only fully works with Volume media because it does not set the license key. I also discovered that 64bit windows will run both the 32bit sections for adding users and running scripts, but not the part for skipping licensing and autologin. This is true from win7 forward. If your not familiar with Unattend.xml those parts are all under the same section in the xml. If you want to give it a spin it’s available at the PowerShell Gallery Onward So equipped with these tools i’m now going to reword my auto patching and WIM creation script. and add that into the module. ","categories": [],
        "tags": ["Rant"],
        "url": "https://blog.bladefirelight.com/shaving-the-yak-leads-me-to-create-new-module-windowsimagetools/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Windows Image Tools \\| Overview",
        "excerpt":"The problem One of the time consuming steps to deploying new VMs is the time spend managing Images and and applying patches. I’m not big on Golden images. I tend to use a fully patched VHDX or VMDK  and let DSC handle the configuration and software. This is not the fastest, and at scale you need to create more then one image based on what saves the most time.  (IIS, SQL, Exchange, etc…). What to do about it I have spend some time putting together a number of scripts to automate this, but after the release of windows 10 and it’s built in access to the galaxy I decided to look at updating and packaging my script into something portable and share it. Why a Module, why not a script? Well scripts are great for automating a process, but not the best when you want to customize for your own process. Say you use a script on the PowerShell Gallery and have customized it to fit your environment and business process. Then their is a bug fix posted to the gallery. You get the fun of adapting the changes into your modified code. This is time consuming, and the reason so many thing in production remain outdated and buggy. But if your using a customized controller script1 that relies on a module function, being able to use the newer release from the PowerShell Gallery is less painful. For that reason I have chosen to use a module and include a function that creates an example controller script. Functions included in WindowsImageTools Functions cover three different areas, Creating VHDX, Manipulating them, and Updates. Create VHDX   Initialize-VHDPartition          Create a VHD(x) with the partitions structure appropriate for the target generation of a VM        Set-VHDPartition          Populate the VHD(x) partitions with the content of an ISO or WIM        Convert-Wim2VHD          Wrapper combining Initialize-VHDPartition and Set-VHDPartition in a single function        New-UnattendXml          Create an Unattent.xml to silently setup windows      Work with VHDX   Get-VhdPartitionStyle          Returns GPT2 or MBR3        Mount-VhdAndRunBlock          Mounts a VHD(x) sets the letter of the first mount point to $driveLeter and invokes a script block. useful for manipulating  files inside a VHD        Invoke-CreateVmRunAndWait          Created a VM attached the VHD to it and waits for it to stop. Used for running boot time scripts that shut down when finished.      Update VHDX   New-WindowsImageToolsExample          Creates an example folder structure and example controller scripts        Get-UpdateConfig          Gets the update configuration stored in the update folders. Contains VM Switch, and IP addresses needed to access the internet when running updates.        Set-UpdateConfig          Change settings in the update configuration        Add-UpdateImage          Uses Convert-Wim2VHD and New-UnattendXml to prep a VHDX for updating        Update-WindowsImageWMF          Update VHDX to WMF 4 or WMF 5        Invoke-WindowsImageUpdate          For one VHDX or all VHD’s in update folder, run windows update and output WIM and optional VHDX                  A script that is specific to a business process &#8617;               GUID Partition Table. Used for Generation 2 and UEFI. will contain MSR, UEFI and Primary partition, may include options Recovery Tools and Recovery Image partitions &#8617;               Master Boot Record. Used for Generation 1 and legacy BIOS. Will use one Primary partition &#8617;       ","categories": ["WindowsImageTools"],
        "tags": ["VHDX","WindowsUpdate","WindowsUpdateTools","Module"],
        "url": "https://blog.bladefirelight.com/windowsimagetools/windows-image-tools-overview/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Windows Image Tools \\| VHDX Creation",
        "excerpt":"## Getting started To automate the creation of clean VM’s we need a clean diskimage. for that we will use Convert-Wim2VHD from WindowsImageTools Before you can create a VHDX your going to need a source. either a WIM or ISO. In tha lab that would usually be a trial version. For work, the iso from your licencing portal, or heaven forbid a physical CD. You can get an evaluation copy of windows from TechNet Evaluation Center I’m going to use a evaluation of 2012r2. I have it downloaded and saved to G:\\ISO\\Srv2012r2Eval.iso and i’m going to create a new vhdx in G:\\vhd Convert-Wim2VHD -Path G:\\vhd\\2012r2_eval_Core.vhdx -Size 60gb -Dynamic -DiskLayout UEFI -SourcePath G:\\iso\\Srv2012r2Eval.ISO -Index 1 -VerboseVERBOSE: [Convert-Wim2VHD] : Overwrite partitions inside [G:\\vhd\\2012r2_eval_Core.vhdx] with content of [G:\\iso\\Srv2012r2Eval.ISO]VERBOSE: [Convert-Wim2VHD] : InitializeVHDPartitionParamVERBOSE:Name                           Value----                           -----Dynamic                        TruePath                           G:\\vhd\\2012r2_eval_Core.vhdxDiskLayout                     UEFIforce                          TrueSize                           64424509440VERBOSE: [Convert-Wim2VHD] : SetVHDPartitionParamVERBOSE:Name                           Value----                           -----SourcePath                     G:\\iso\\Srv2012r2Eval.ISOPath                           G:\\vhd\\2012r2_eval_Core.vhdxFeatureSourceIndex             1Index                          1Force                          TrueConfirm                        FalseVERBOSE: [Convert-Wim2VHD] : ParametersToPassVERBOSE:Name                           Value----                           -----Verbose                        TrueVERBOSE: [Initialize-VHDPartition] Create partition structure for Bootable vhd(x) on [G:\\vhd\\2012r2_eval_Core.vhdx]VERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : CreatingVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : @vhdParmsVERBOSE:Name                           Value----                           -----Path                           G:\\vhd\\2012r2_eval_Core.vhdxSizeBytes                      64424509440Dynamic                        TrueErrorAction                    StopBlockSizeBytes                 1048576VERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : Mounting disk imageVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : Initializing disk [5] as GPTVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : Clearing disk partitions to start all overVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : EFI system : Creating partition of [209715200] bytesVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : EFI system : Formatting FAT32VERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : EFI system : Setting system partition as ESPVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : MSR : Creating partition of [134217728] bytesVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : Windows : Creating partition of [64078479360] bytesVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : Windows : Formatting volume NTFSVERBOSE: [Initialize-VHDPartition] [2012r2_eval_Core.vhdx] : Dismounting disk imageVERBOSE: [Set-VHDPartition] : Overwrite partitions inside [G:\\vhd\\2012r2_eval_Core.vhdx] with content of[G:\\iso\\Srv2012r2Eval.ISO]VERBOSE: [Set-VHDPartition] : Opening ISO [Srv2012r2Eval.ISO]VERBOSE: [Set-VHDPartition] : Looking for I:\\sources\\install.wimVERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] : Mounting disk image [G:\\vhd\\2012r2_eval_Core.vhdx]VERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] : Munted as disknumber [5]VERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] : Partition TableVERBOSE:PartitionNumber DriveLetter        Size Type--------------- -----------        ---- ----              1           J   209715200 System              2               134217728 Reserved              3           K 64078479360 BasicVERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] Windows Partition [3] : Applying image from[I:\\sources\\install.wim] to [K:\\] using Index [1]VERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] : Disk Layout [UEFI]VERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] System Partition [1] : Running [K:\\Windows\\System32\\bcdboot.exe] -&gt; K:\\Windows /s J: /v /f UEFIVERBOSE: [Run-Executable] : Running [K:\\Windows\\System32\\bcdboot.exe] [K:\\Windows /s J: /v /f UEFI]VERBOSE:Name                           Value----                           -----PassThru                       TrueFilePath                       K:\\Windows\\System32\\bcdboot.exeArgumentList                   {K:\\Windows, /s J:, /v, /f UEFI}RedirectStandardError          C:\\Users\\BLADE_~1\\AppData\\Local\\Temp\\bcdboot.exe-StandardError.txtNoNewWindow                    TrueWait                           TrueRedirectStandardOutput         C:\\Users\\BLADE_~1\\AppData\\Local\\Temp\\bcdboot.exe-StandardOutput.txtVERBOSE: [Run-Executable] : Return code was [0]VERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] : Removing Drive lettersVERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] : DismountingVERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] : FinishedServer with a GUI and .net 3.5 Lets say we need a VM with the Desktop and .Net 3.5 to run a legacy vendor app. Convert-Wim2VHD -Path G:\\vhd\\2012r2_eval_gui.vhdx -Size 60gb -Dynamic -DiskLayout UEFI -SourcePath G:\\iso\\Srv2012r2Eval.ISO -Index 2 -Feature NetFx3The -Feature command takes the feature names that would be understood by DISM, or Install-WindowsOptionalFeature Creating a VHDX is a good start, but we want to automate this. for that we need an Unatten.xml. I will cover that in the next blog ","categories": ["WindowsImageTools"],
        "tags": ["VHDX","WindowsUpdate","WindowsUpdateTools","Module"],
        "url": "https://blog.bladefirelight.com/windowsimagetools/VHDXCreation/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Windows Image Tools \\| Unattend.xml",
        "excerpt":"Getting started The second item need to automate the creation of a VM is a way to bootstrap said automation of a fresh windows image. That requires an unattend.xml prerequisites Now to work with Unattent.xml you need a deep understanding of XML structure and namespace… Just kidding. I’m going to use New-UnattendXml part of WindowsImageTools You can install WindowsImageTools from the PowerShell Gallery with install-module WindowsImageTools Creating a basic Unattent.xml Lets start off with a basic Unattend. Minimum requirements for this is changing the administrator password New-UnattendXml -AdminCredential (Get-Credential) |Get-Contentcmdlet Get-Credential at command pipeline position 1Supply values for the following parameters:CredentialWARNING: C:\\Users\\BLADE_~1\\AppData\\Local\\Temp\\hqfyjyg2\\unattend.xml only usable on a server SKU, for a client OS, useeither -EnableAdministrator or -UserAccountNotice the warning. Setting the Admin password on a server is all you need, as the build in Administrator account is allready enabled. On a client OS you have to either enable the administrator or add a second one or three.It spits out this mass of XML &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;unattend xmlns=\"urn:schemas-microsoft-com:unattend\"&gt;  &lt;settings pass=\"specialize\"&gt;    &lt;component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;    &lt;/component&gt;    &lt;component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;    &lt;/component&gt;    &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;      &lt;ComputerName&gt;*&lt;/ComputerName&gt;    &lt;/component&gt;    &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;      &lt;ComputerName&gt;*&lt;/ComputerName&gt;    &lt;/component&gt;  &lt;/settings&gt;  &lt;settings pass=\"oobeSystem\"&gt;    &lt;component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;      &lt;InputLocale&gt;en-US&lt;/InputLocale&gt;      &lt;SystemLocale&gt;en-US&lt;/SystemLocale&gt;      &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;      &lt;UserLocale&gt;en-US&lt;/UserLocale&gt;    &lt;/component&gt;    &lt;component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;      &lt;InputLocale&gt;en-US&lt;/InputLocale&gt;      &lt;SystemLocale&gt;en-US&lt;/SystemLocale&gt;      &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;      &lt;UserLocale&gt;en-US&lt;/UserLocale&gt;    &lt;/component&gt;    &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;      &lt;OOBE&gt;        &lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;        &lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;        &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;        &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;        &lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;        &lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;      &lt;/OOBE&gt;      &lt;TimeZone&gt;GMT Standard Time&lt;/TimeZone&gt;      &lt;UserAccounts&gt;        &lt;AdministratorPassword&gt;          &lt;Value&gt;YQBkAHMAZgBBAGQAbQBpAG4AaQBzAHQAcgBhAHQAbwByAFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;          &lt;PlainText&gt;false&lt;/PlainText&gt;        &lt;/AdministratorPassword&gt;      &lt;/UserAccounts&gt;      &lt;RegisteredOrganization&gt;Generic Organization&lt;/RegisteredOrganization&gt;      &lt;RegisteredOwner&gt;Generic Owner&lt;/RegisteredOwner&gt;    &lt;/component&gt;    &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;      &lt;OOBE&gt;        &lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;        &lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;        &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;        &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;        &lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;        &lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;      &lt;/OOBE&gt;      &lt;TimeZone&gt;GMT Standard Time&lt;/TimeZone&gt;      &lt;UserAccounts&gt;        &lt;AdministratorPassword&gt;          &lt;Value&gt;YQBkAHMAZgBBAGQAbQBpAG4AaQBzAHQAcgBhAHQAbwByAFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;          &lt;PlainText&gt;false&lt;/PlainText&gt;        &lt;/AdministratorPassword&gt;      &lt;/UserAccounts&gt;      &lt;RegisteredOrganization&gt;Generic Organization&lt;/RegisteredOrganization&gt;      &lt;RegisteredOwner&gt;Generic Owner&lt;/RegisteredOwner&gt;    &lt;/component&gt;  &lt;/settings&gt;&lt;/unattend&gt;Anatomy of Unattent.xml Takeing a closer look at each section Specialize : Deployment Contrary to popular belief, the unattend.xml can have one file that can be use for both 32 and 64bit. All you have to do is repeat the section with a different architecture. With one caveat that I will get into later. In the basic Unattent the Deployment section is empty. &lt;component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;&lt;/component&gt;&lt;component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;&lt;/component&gt;Specialize : Shell Setup Basic settings lets windows pick a random computer name. &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;ComputerName&gt;*&lt;/ComputerName&gt;&lt;/component&gt;&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;ComputerName&gt;*&lt;/ComputerName&gt;&lt;/component&gt;oobeSystem : International Core The language and input are localized to en-US by default, This can be changed via parameters &lt;component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;InputLocale&gt;en-US&lt;/InputLocale&gt;  &lt;SystemLocale&gt;en-US&lt;/SystemLocale&gt;  &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;  &lt;UserLocale&gt;en-US&lt;/UserLocale&gt;&lt;/component&gt;&lt;component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;InputLocale&gt;en-US&lt;/InputLocale&gt;  &lt;SystemLocale&gt;en-US&lt;/SystemLocale&gt;  &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;  &lt;UserLocale&gt;en-US&lt;/UserLocale&gt;&lt;/component&gt;oobeSystem :  Shell-Setup This section is a bit larger. It going to hide or skip everything it can to avoid any prompting. Afterall this is suposed to be automated.We also set the Timezone to a default of GMT and set the admin passwordNow the Admin Password may look encrypted, but it’s not that is 64bit encodeing. The best thing to do is set a password here for troubleshooting, then change it via LAPS or DSC once windows is up and running. &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;OOBE&gt;    &lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;    &lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;    &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;    &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;    &lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;    &lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;  &lt;/OOBE&gt;  &lt;TimeZone&gt;GMT Standard Time&lt;/TimeZone&gt;  &lt;UserAccounts&gt;    &lt;AdministratorPassword&gt;      &lt;Value&gt;YQBkAHMAZgBBAGQAbQBpAG4AaQBzAHQAcgBhAHQAbwByAFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;      &lt;PlainText&gt;false&lt;/PlainText&gt;    &lt;/AdministratorPassword&gt;  &lt;/UserAccounts&gt;  &lt;RegisteredOrganization&gt;Generic Organization&lt;/RegisteredOrganization&gt;  &lt;RegisteredOwner&gt;Generic Owner&lt;/RegisteredOwner&gt;&lt;/component&gt;&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;OOBE&gt;    &lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;    &lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;    &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;    &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;    &lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;    &lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;  &lt;/OOBE&gt;  &lt;TimeZone&gt;GMT Standard Time&lt;/TimeZone&gt;  &lt;UserAccounts&gt;    &lt;AdministratorPassword&gt;      &lt;Value&gt;YQBkAHMAZgBBAGQAbQBpAG4AaQBzAHQAcgBhAHQAbwByAFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;      &lt;PlainText&gt;false&lt;/PlainText&gt;    &lt;/AdministratorPassword&gt;  &lt;/UserAccounts&gt;  &lt;RegisteredOrganization&gt;Generic Organization&lt;/RegisteredOrganization&gt;  &lt;RegisteredOwner&gt;Generic Owner&lt;/RegisteredOwner&gt;&lt;/component&gt;This is all well and good but it’s still only get’s us the first step. To automate deployment we need to do more then bypass prompts and set a password. More usefull Unattent.xml Now we will set a few more items. $param = @{  AdminCredential = (Get-Credential)   UserAccount = (Get-Credential), (Get-Credential)   FirstBootScriptPath = 'C:\\PsTemp\\FirstBoot.ps1'   TimeZone = 'Central Standard Time'   RegisteredOwner = 'Employee'  RegisteredOrganization = 'Contoso'  enableAdministrator = $true }New-UnattendXml @param | get-contentspecialize :  Deployment One thing to notice here is the amd64 component is still blank. The reason for this is 64bit OS’s will run the commands in both the 32 and 64bit sections. We have two commands in the RunSynchronous section. The first one enables the Administrator account. the second launches PowerShell with the script path we asked for. &lt;component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;&lt;/component&gt;&lt;component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;RunSynchronous&gt;    &lt;RunSynchronousCommand wcm:action=\"add\"&gt;      &lt;Description&gt;Enable Administrator&lt;/Description&gt;      &lt;Order&gt;1&lt;/Order&gt;      &lt;Path&gt;net user administrator /active:yes&lt;/Path&gt;    &lt;/RunSynchronousCommand&gt;    &lt;RunSynchronousCommand wcm:action=\"add\"&gt;      &lt;Description&gt;PowerShell First boot script&lt;/Description&gt;      &lt;Order&gt;2&lt;/Order&gt;      &lt;Path&gt;%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -ExecutionPolicy Bypass -File \"C:\\PsTemp\\FirstBoot.ps1\"&lt;/Path&gt;    &lt;/RunSynchronousCommand&gt;  &lt;/RunSynchronous&gt;&lt;/component&gt;oobeSystem :  Shell Setup The next section that is diferent is the shell setup. You will notice I set two additional user accounts. Remember that the passwords are encoded not encrypted. I also have entries to set the ownership. &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;OOBE&gt;    &lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;    &lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;    &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;    &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;    &lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;    &lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;  &lt;/OOBE&gt;  &lt;TimeZone&gt;Central Standard Time&lt;/TimeZone&gt;  &lt;UserAccounts&gt;    &lt;AdministratorPassword&gt;      &lt;Value&gt;UABAAHMAcwB3ADAAcgBkAEEAZABtAGkAbgBpAHMAdAByAGEAdABvAHIAUABhAHMAcwB3AG8AcgBkAA==&lt;/Value&gt;      &lt;PlainText&gt;false&lt;/PlainText&gt;    &lt;/AdministratorPassword&gt;    &lt;LocalAccounts&gt;      &lt;LocalAccount wcm:action=\"add\"&gt;        &lt;Password&gt;          &lt;Value&gt;UABAAHMAcwB3ADAAcgBkADEAMgAzAFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;          &lt;PlainText&gt;false&lt;/PlainText&gt;        &lt;/Password&gt;        &lt;DisplayName&gt;Don&lt;/DisplayName&gt;        &lt;Group&gt;Administrators&lt;/Group&gt;        &lt;Name&gt;Don&lt;/Name&gt;      &lt;/LocalAccount&gt;      &lt;LocalAccount wcm:action=\"add\"&gt;        &lt;Password&gt;          &lt;Value&gt;UABAAHMAcwB3ADAAcgBkADQANQA2AFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;          &lt;PlainText&gt;false&lt;/PlainText&gt;        &lt;/Password&gt;        &lt;DisplayName&gt;Mike&lt;/DisplayName&gt;        &lt;Group&gt;Administrators&lt;/Group&gt;        &lt;Name&gt;Mike&lt;/Name&gt;      &lt;/LocalAccount&gt;    &lt;/LocalAccounts&gt;  &lt;/UserAccounts&gt;  &lt;RegisteredOrganization&gt;Contoso&lt;/RegisteredOrganization&gt;  &lt;RegisteredOwner&gt;Employee&lt;/RegisteredOwner&gt;&lt;/component&gt;&lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;  &lt;OOBE&gt;    &lt;HideEULAPage&gt;true&lt;/HideEULAPage&gt;    &lt;HideWirelessSetupInOOBE&gt;true&lt;/HideWirelessSetupInOOBE&gt;    &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;    &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;    &lt;SkipUserOOBE&gt;true&lt;/SkipUserOOBE&gt;    &lt;SkipMachineOOBE&gt;true&lt;/SkipMachineOOBE&gt;  &lt;/OOBE&gt;  &lt;TimeZone&gt;Central Standard Time&lt;/TimeZone&gt;  &lt;UserAccounts&gt;    &lt;AdministratorPassword&gt;      &lt;Value&gt;UABAAHMAcwB3ADAAcgBkAEEAZABtAGkAbgBpAHMAdAByAGEAdABvAHIAUABhAHMAcwB3AG8AcgBkAA==&lt;/Value&gt;      &lt;PlainText&gt;false&lt;/PlainText&gt;    &lt;/AdministratorPassword&gt;    &lt;LocalAccounts&gt;      &lt;LocalAccount wcm:action=\"add\"&gt;        &lt;Password&gt;          &lt;Value&gt;UABAAHMAcwB3ADAAcgBkADEAMgAzAFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;          &lt;PlainText&gt;false&lt;/PlainText&gt;        &lt;/Password&gt;        &lt;DisplayName&gt;Don&lt;/DisplayName&gt;        &lt;Group&gt;Administrators&lt;/Group&gt;        &lt;Name&gt;Don&lt;/Name&gt;      &lt;/LocalAccount&gt;      &lt;LocalAccount wcm:action=\"add\"&gt;        &lt;Password&gt;          &lt;Value&gt;UABAAHMAcwB3ADAAcgBkADQANQA2AFAAYQBzAHMAdwBvAHIAZAA=&lt;/Value&gt;          &lt;PlainText&gt;false&lt;/PlainText&gt;        &lt;/Password&gt;        &lt;DisplayName&gt;Mike&lt;/DisplayName&gt;        &lt;Group&gt;Administrators&lt;/Group&gt;        &lt;Name&gt;Mike&lt;/Name&gt;      &lt;/LocalAccount&gt;    &lt;/LocalAccounts&gt;  &lt;/UserAccounts&gt;  &lt;RegisteredOrganization&gt;Contoso&lt;/RegisteredOrganization&gt;  &lt;RegisteredOwner&gt;Employee&lt;/RegisteredOwner&gt;  &lt;FirstLogonCommands /&gt;  &lt;LogonCommands /&gt;&lt;/component&gt;Puting it together New-UnattentXML returns a path object to the file created, and by default that is in $env:TEMP. so we will store the path in a variable and use it pluss the path to our FirstBoot script when creating the VHDX Adding the unattend and script file when creating a VHDX $UnattentParam = @{  AdminCredential = (Get-Credential)   UserAccount = (Get-Credential), (Get-Credential)   FirstBootScriptPath = 'C:\\PsTemp\\FirstBoot.ps1'   TimeZone = 'Central Standard Time'   RegisteredOwner = 'Employee'  RegisteredOrganization = 'Contoso'  enableAdministrator = $true }$UnattentPath = (New-UnattendXml @UnattentParam ).FullName$FirstBootContent = {  ## Do something Cool} New-Item -Path \"G:\\filesToInject\\PsTemp\" -Name FirstBoot.ps1 -ItemType 'file' -Value $FirstBootContent$ConverParm = @{  Path = 'G:\\vhd\\2012r2_eval_Core.vhdx'   Size = 60gb   Dynamic = $true   DiskLayout = 'UEFI'   SourcePath = 'G:\\iso\\Srv2012r2Eval.ISO'   Index = 1   Feature = 'NetFx3'  Unattend = $UnattentPath   filesToInject = 'G:\\filesToInject\\PsTemp'} Convert-Wim2VHD @ConverParm -VerboseBelow is part of the verbose output that covers Unattend and filesToInject VERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] Windows Partition [3] : Adding files from G:\\filesToInjectVERBOSE: [Set-VHDPartition] [2012r2_eval_Core.vhdx] Windows Partition [3] : Adding Unattend.xml (C:\\Users\\Blade_000\\AppData\\Local\\Temp\\djebkgrz\\unattend.xml)So now when this vhdx first boots it will process Unattend creating users and running our PowerShell script ","categories": ["WindowsImageTools"],
        "tags": ["VHDX","WindowsUpdate","WindowsUpdateTools","Module"],
        "url": "https://blog.bladefirelight.com/windowsimagetools/Unattend/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Windows Image Tools \\| Modify VHDX",
        "excerpt":"Continuing onward In the last post I talked about Unattend.xml and using WindowsImageTools to create a new VHDX with an Unattend.xml and FirstBoot.ps1 for it to run. using that as a starting point I’m going to replace the do-nothing FirstBoot.ps1 add have it so something more interesting. Prerequisites You will need the VHDX created at the end of my post on New-UnattendXml and obviously a copy on WindowsImageTools from the PowerShell gallery. We are going to have our VHDX install 7Zip on first boot so you will need to download a the MSI if your following along. Creating a new improved FirstBoot.ps1 I downloaded my MSI into G:\\filesToInject\\PsTemp and now i’m going to replace firstboot.ps1 so it will silently install it and write a log and shutdown $BetterFirstBootContent = {   start-process C:\\PsTemp\\7z1602-x64.msi -ArgumentList '/q','INSTALLDIR=\"C:\\Program Files\\7-Zip\"' -wait} New-Item -Path \"G:\\filesToInject\\PsTemp\" -Name FirstBoot.ps1 -ItemType 'file' -Value $BetterFirstBootContent -ForcePlacing the files in the VHDX So now we need to get the two fils into our existing VHD. Now I could just run Convert-Wim2VHD again with the same commands and I would get the desired effect, but I dont want to wait for the that process. I also could just mount the VHDX and drag and drop the files into the VHDX, but that would not let me show off another function in WindowsImageTools Mount-VhdAndRunBlock Mount-VhdAndRunBlock is one of my favorite tools. It will mount a VHD and run a script block allowing me to manipulate the files inside. This can be used for copying in files, Editing the registry, checking if a file exists and so on. $ScriptBlock = {  copy G:\\filesToInject\\PsTemp\\*.* \"$($driveletter):\\PsTemp\\\" -Force} Mount-VhdAndRunBlock -VHD 'G:\\vhd\\2012r2_eval_Core.vhdx' -block $ScriptBlockNow that we have the better first boot script we need to create a VM to attach the vhdx to. for that I’m going to use Invoke-CreateVmRunAndWait. Before we create a VM Lets look at what we need besides the vhdx to use Invoke-CreateVmRunAndWait help Invoke-CreateVmRunAndWaitNAME    Invoke-CreateVmRunAndWaitSYNOPSIS    Create a temp vm with a random name and wait for it to stopSYNTAX    Invoke-CreateVmRunAndWait [-VhdPath] &lt;String&gt; [-VmGeneration] &lt;Int32&gt; [-VmSwitch] &lt;String&gt; [[-vLan] &lt;Int32&gt;]    [[-ProcessorCount] &lt;Int32&gt;] [[-MemoryStartupBytess] &lt;Int64&gt;] [&lt;CommonParameters&gt;]So according to the syntax VhdPath, VmGeneration and VmSwitch are required parameters. Deciding on a VM Generation While I know what type of VHDX i created, when creating automation script we may not always know if I need a Gen1 or Gen2 VM. So I’m going use Get-VhdPartitionStyle. Get-VhdPartitionStyle will return a string of either MBR for Master Boot Record or GPT for GUID Partition Table. Generation 1 VM’s are based on BIOS and windows only works with MBR partitions for BIOS based computers. Generation 2 VM’s are based on uEFI architecture and Windows uses GPT partitions by default with uEFI. $vmGeneration = 2 #default to gen2 $PartitionStyle = Get-VhdPartitionStyle -vhd 'G:\\vhd\\2012r2_eval_Core.vhdx'if ($PartitionStyle -eq 'GPT') {    $vmGeneration = 2}Getting the switch We are not actually going to use the network in this example so I’m just going to grab the first VmSwitch $VmSwitch = (Get-VMSwitch)[0].Name #First switchCreating the VM Invoke-CreateVmRunAndWait -VhdPath 'G:\\vhd\\2012r2_eval_Core.vhdx' -VmGeneration $vmGeneration -VmSwitch $VmSwitch -verboseWe now have a randomly named vm that will run our script and install z7ip. Because it running this during the specialize phase once it’s done it will reboot and end up at the “Press Ctrl+Alt+Del to login” I”m just going to use Hyper-V manager to shut it down. VERBOSE: [Invoke-CreateVmRunAndWait] : Creating VM 1utbdwad at 08/30/2016 10:57:29VERBOSE: [Invoke-CreateVmRunAndWait] : VM 1utbdwad stoppedVERBOSE: [Invoke-CreateVmRunAndWait] : VM 1utbdwad Deleted at 08/30/2016 11:08:47Checking the results $ScriptBlock = {  dir \"$($driveletter):\\Program Files\\\"} Mount-VhdAndRunBlock -VHD 'G:\\vhd\\2012r2_eval_Core.vhdx' -block $ScriptBlock    Directory: K:\\Program FilesMode                LastWriteTime         Length Name----                -------------         ------ ----d-----         9/4/2016   9:42 AM                7-Zipd-----        8/22/2013  10:39 AM                Common Filesd-----        3/21/2014   1:09 PM                Internet Explorerd-----        8/22/2013  10:39 AM                WindowsPowerShellSummary So now we have a VM with an app installed, users created and automated the Out of Box Esperance. However a fresh install of Server 2012 R2 does not have WMF 5 and will have a ton of patches that need to be installed. I will tackle that next. ","categories": ["WindowsImageTools"],
        "tags": ["VHDX","WindowsUpdate","WindowsUpdateTools","Module"],
        "url": "https://blog.bladefirelight.com/windowsimagetools/Modifying-Fresh-VHDX/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Re-factoring the Blog",
        "excerpt":"Sometimes rebooting fixes everything After spending month after month on WidnowsImageTools and little else in my free time. My blog has been looking like abandonware. I had always planed to comeback, but there was always this nagging issue. WordPress. is a hosted service and cost money if you want more then the vanilla. And I had no interest in hosting WordPress elseware. It also was missing a plug-in that allowed you to to reference GitHub files directly. Copying code from a GitHub project into Gist seems like a major waste of time. Enter Jekyll A few months ago I listened to a podcast where they briefly mentioned github pages. This perked my interest. Partially because if was free, and partly because if was GitHub. (I also like the idea of bloging like a hacker). I figured if it was hosted on GitHub, surely they would have a easy way to reference a GitHub Repo. No such luck. The default plugins were somewhat limited. If I wanted unsupported plugins I had to compile the site locally. So I looked at all the plugins for Jekyll in Ruby Gems, I came across one that worked. However it only wanted to work in Jekyll version 1. I looked at the code on it’s GitHub repo and it looked to be an arbitrary requirement. So I set out the setup Jekyll using Bash on Windows 10. I plan to write a full blog on the experience. There were many bumps and gatcha’s getting here, but I now can reference sections of GitHub Repos files in my posts, so it was worth it. ","categories": [],
        "tags": ["Blog","Jekyll"],
        "url": "https://blog.bladefirelight.com/Blog-Refactoring/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Windows Image Tools \\| Creating an Updated Image Part 1",
        "excerpt":"Staring over In the last post I demonstrated creating a fresh VHDX, with unattent.xml and using that to install 7zip. Now i’m going to throw all that out, and starting over with a base image to install WMF5 and run windows updates. Prerequisites For this we need the folder scructure used the WindowsImageTools to store the files. Luckily we have New-WindowsImageToolsExample that will create the folders and files we need. New-WindowsImageToolsExample -Path g:\\Blog_ExampleWARNING: Unable to read Windows Image Tools Update Cofniguration from g:\\Blog_Example\\Config.xml, creating a new file    Directory: G:\\Mode                LastWriteTime         Length Name----                -------------         ------ ----d-----         9/6/2016   4:09 PM                Blog_ExampleLet’s take a look at what we get dir G:\\Blog_Example\\    Directory: G:\\Blog_ExampleMode                LastWriteTime         Length Name----                -------------         ------ ----d-----         9/6/2016   4:09 PM                BaseImaged-----         9/6/2016   4:09 PM                ISOd-----         9/6/2016   4:09 PM                Resourced-----         9/6/2016   4:09 PM                UpdatedImageShare-a----         9/6/2016   4:09 PM           3993 AdvancedUpdateExample.ps1-a----         9/6/2016   4:09 PM           4775 BasicConvertExample.ps1-a----         9/6/2016   4:09 PM           7456 BasicUpdateExample.ps1-a----         9/6/2016   4:09 PM           1788 Config.xml-a----         9/6/2016   4:09 PM           4814 DownloadEvalIso.ps1I will not be delving into the example ps1 files. I’m going to walkthrough a similar example to the advanced one. We will start by looking at the Config.xml &lt;Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"&gt;  &lt;Obj RefId=\"0\"&gt;    &lt;TN RefId=\"0\"&gt;      &lt;T&gt;System.Collections.Hashtable&lt;/T&gt;      &lt;T&gt;System.Object&lt;/T&gt;    &lt;/TN&gt;    &lt;DCT&gt;      &lt;En&gt;        &lt;S N=\"Key\"&gt;Gateway&lt;/S&gt;        &lt;S N=\"Value\"&gt;192.168.0.1&lt;/S&gt;      &lt;/En&gt;      &lt;En&gt;        &lt;S N=\"Key\"&gt;vLan&lt;/S&gt;        &lt;I32 N=\"Value\"&gt;0&lt;/I32&gt;      &lt;/En&gt;      &lt;En&gt;        &lt;S N=\"Key\"&gt;IpAddress&lt;/S&gt;        &lt;S N=\"Value\"&gt;192.168.0.100&lt;/S&gt;      &lt;/En&gt;      &lt;En&gt;        &lt;S N=\"Key\"&gt;VmSwitch&lt;/S&gt;        &lt;S N=\"Value\"&gt;vmswitch&lt;/S&gt;      &lt;/En&gt;      &lt;En&gt;        &lt;S N=\"Key\"&gt;IpType&lt;/S&gt;        &lt;S N=\"Value\"&gt;DHCP&lt;/S&gt;      &lt;/En&gt;      &lt;En&gt;        &lt;S N=\"Key\"&gt;SubnetMask&lt;/S&gt;        &lt;I32 N=\"Value\"&gt;24&lt;/I32&gt;      &lt;/En&gt;      &lt;En&gt;        &lt;S N=\"Key\"&gt;DnsServer&lt;/S&gt;        &lt;S N=\"Value\"&gt;192.168.0.1&lt;/S&gt;      &lt;/En&gt;    &lt;/DCT&gt;  &lt;/Obj&gt;&lt;/Objs&gt;It’s a basic clixml file created with Export-Clixml containing the configuration used by WindowsImageTools to manage network settings for the vm’s it creates. Now I’m not about to edit that file manual, and while I could use Import-Clixml/Export-Clixml to work with it. It simpler to use the functions that come with WindowsImageTools Get-UpdateConfig/Set-UpdateConfig Get-UpdateConfig -Path G:\\Blog_Example\\Name                           Value----                           -----IpType                         DHCPvLan                           0DnsServer                      192.168.0.1Gateway                        192.168.0.1VmSwitch                       vmswitchSubnetMask                     24IpAddress                      192.168.0.100As you can see the default uses DHCP for the vm’s IP assignment, does not use vLan tageing and attached to the virtual switch called vmswitch. To use it in my enviroment I need to make one small change Set-UpdateConfig -Path G:\\Blog_Example\\ -VmSwitch Bridge | Get-UpdateConfigName                           Value----                           -----IpType                         DHCPvLan                           0DnsServer                      192.168.0.1Gateway                        192.168.0.1VmSwitch                       BridgeSubnetMask                     24IpAddress                      192.168.0.100Now we are ready to add a base images. A la carte or All you can eat I’m going to create two images. One bear-bones 2012 R2 Core and one 2012 R2 GUI with .net 3.5. The reason for this is I want one really small WIM/VHDX for a starting port, and one WIM that I can use for a source to add Windows Features. Why the Soruce WIM?  Windows Core comes with very little of the Windows Features installed, and when you add them Install-WindowsFeature will look to Windows Update for the missing bits. However if you don’t have internet access then you need a source WIM. In a secure environment InfoSec usually frowns on web surfing from servers and expect you to use WSUS for updates. Unfortunately Install-WindowsFeature will not use WSUS. Add-UpdateImage -Path 'G:\\Blog_Example\\' -FriendlyName 'Srv2012r2_Source' -DiskLayout UEFI -SourcePath 'G:\\iso\\Srv2012r2Eval.ISO'  -AdminCredential (Get-Credential) -AddPayloadForRemovedFeature -Index 4Add-UpdateImage -Path 'G:\\Blog_Example\\' -FriendlyName 'Srv2012r2_Core' -DiskLayout UEFI -SourcePath 'G:\\iso\\Srv2012r2Eval.ISO'  -AdminCredential (Get-Credential) -Index 3dir 'G:\\Blog_Example\\BaseImage\\'This gives us the two files.     Directory: G:\\Blog_Example\\BaseImageMode                LastWriteTime         Length Name----                -------------         ------ -----a----         9/6/2016   8:55 PM     4874829824 Srv2012r2_Core_base.vhdx-a----         9/6/2016   8:28 PM     8250195968 Srv2012r2_Source_base.vhdxNext up I’m going to update both to WMF5. ","categories": ["WindowsImageTools"],
        "tags": ["VHDX","WindowsUpdate","WindowsUpdateTools","Module"],
        "url": "https://blog.bladefirelight.com/windowsimagetools/Creating-an-Updateed-Image-Part1-Base-VHDX/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Windows Image Tools \\| Creating an Updated Image Part 2",
        "excerpt":"Plan for today Windows Management Framework contains PowerShell. You should always run the latest supported in your environment, and it’s a good idea to get your hands on the preview and give it test run. I want my 2012r2 servers to be running WMF 5.0 the current stable realease. Now I could install 5.1 preview, but as it has to be uninstalled when the final get’s released, so I’m going to pass for now. Prerequisites If you folowing along you will need the WindowsImageTools update folder and two VHDX created in the last blog Updating WMF Using Update-WindowsImageWMF we will download WMF 5.0 and .net 4.6. PS G:\\&gt; Update-WindowsImageWMF -Path G:\\Blog_Example\\ -ImageName Srv2012r2_Core -VerboseFirst it’s going to create a child vhdx so we can revert if things go south VERBOSE: Performing the operation \"Update WMF in Windows Image Tools Update Image\" on target\"G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Base.vhdx\".VERBOSE: [Update-WindowsImageWMF] : Creating G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdx fromG:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Base.vhdxThen it’s going to download the installer packages VERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF in G:\\Blog_Example\\\\Resource\\WMF\\5VERBOSE: GET https://www.microsoft.com/en-us/download/details.aspx?id=50395 with 0-byte payloadVERBOSE: received 107311-byte response of content type text/htmlVERBOSE: GET http://www.microsoft.com/en-us/download/confirmation.aspx?id=50395 with 0-byte payloadVERBOSE: received -1-byte response of content type text/htmlWARNING: [Update-WindowsImageWMF] : Checking for the latest WMF : W2K12-KB3134759-x64.msu Missing, DownloadingVERBOSE: GET https://download.microsoft.com/download/2/C/6/2C6E1B4A-EBE5-48A6-B225-2D2058A9CEFB/W2K12-KB3134759-x64.msu with 0-byte payloadVERBOSE: received 21540661-byte response of content type application/octet-streamVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF :G:\\Blog_Example\\\\Resource\\WMF\\5\\W2K12-KB3134759-x64.msu : FoundWARNING: [Update-WindowsImageWMF] : Checking for the latest WMF : Win7AndW2K8R2-KB3134760-x64.msu Missing, DownloadingVERBOSE: GEThttps://download.microsoft.com/download/2/C/6/2C6E1B4A-EBE5-48A6-B225-2D2058A9CEFB/Win7AndW2K8R2-KB3134760-x64.msu with 0-byte payloadVERBOSE: received 21779572-byte response of content type application/octet-streamVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF :G:\\Blog_Example\\\\Resource\\WMF\\5\\Win7AndW2K8R2-KB3134760-x64.msu : FoundWARNING: [Update-WindowsImageWMF] : Checking for the latest WMF : Win7-KB3134760-x86.msu Missing, DownloadingVERBOSE: GET https://download.microsoft.com/download/2/C/6/2C6E1B4A-EBE5-48A6-B225-2D2058A9CEFB/Win7-KB3134760-x86.msuwith 0-byte payloadVERBOSE: received 16961221-byte response of content type application/octet-streamVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF :G:\\Blog_Example\\\\Resource\\WMF\\5\\Win7-KB3134760-x86.msu : FoundWARNING: [Update-WindowsImageWMF] : Checking for the latest WMF : Win8.1AndW2K12R2-KB3134758-x64.msu Missing,DownloadingVERBOSE: GEThttps://download.microsoft.com/download/2/C/6/2C6E1B4A-EBE5-48A6-B225-2D2058A9CEFB/Win8.1AndW2K12R2-KB3134758-x64.msuwith 0-byte payloadVERBOSE: received 19764832-byte response of content type application/octet-streamVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF :G:\\Blog_Example\\\\Resource\\WMF\\5\\Win8.1AndW2K12R2-KB3134758-x64.msu : FoundWARNING: [Update-WindowsImageWMF] : Checking for the latest WMF : Win8.1-KB3134758-x86.msu Missing, DownloadingVERBOSE: GEThttps://download.microsoft.com/download/2/C/6/2C6E1B4A-EBE5-48A6-B225-2D2058A9CEFB/Win8.1-KB3134758-x86.msu with 0-byte payloadVERBOSE: received 15059790-byte response of content type application/octet-streamVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF :G:\\Blog_Example\\\\Resource\\WMF\\5\\Win8.1-KB3134758-x86.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for .NET 4.6.1 installerWARNING: [Update-WindowsImageWMF] : Checking for .NET 4.6 installer : Missing : DownloadingVERBOSE: GEThttps://download.microsoft.com/download/E/4/1/E4173890-A24A-4936-9FC9-AF930FE3FA40/NDP461-KB3102436-x86-x64-AllOS-ENU.exe with 0-byte payloadVERBOSE: received 67681000-byte response of content type application/octet-streamNow it will copy the .NET installer and an AtStartup.ps1 to run the install. VERBOSE: [Update-WindowsImageWMF] : .NET : Adding installer to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: [Update-WindowsImageWMF] : .NET : updateting AtStartup scriptIt is going to create a VM with a random name and wait for it to stop. While it’s running the AtStartup script will install .net, reboot and check the version of .netIf it find’s what it’s expecting it creates a file that Update-WindowsImageWMF will look for to decide if it can continue. VERBOSE: [Update-WindowsImageWMF] : .NET : Creating temp vm and waitingVERBOSE: [createRunAndWaitVM] : Creating VM s4gzlpa4 at 09/22/2016 16:54:47VERBOSE: [createRunAndWaitVM] : VM s4gzlpa4 StopedVERBOSE: [createRunAndWaitVM] : VM s4gzlpa4 Deleted at 09/22/2016 17:12:52You cant use PowerShell to WMF because that updates PowerShell. So It will apply the MSU to the VHDX.Now because Update-WindowsImageWMF does not know what OS is inside the vhdx. It will apply them all. Unfortunetly DISM (that does the work) reports succses when the MSU does not apply to that version of the OS. So it looks like all of the are installing but only the one that should actualy does. VERBOSE: [Update-WindowsImageWMF] : WMF : Applying WMF to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdx andUpdating AtStartup scriptVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\W2K12-KB3134759-x64.msu applies toG:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\W2K12-KB3134759-x64.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win7-KB3134760-x86.msu applies toG:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win7-KB3134760-x86.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win7AndW2K8R2-KB3134760-x64.msu applies toG:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win7AndW2K8R2-KB3134760-x64.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1-KB3134758-x86.msu applies toG:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1-KB3134758-x86.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1AndW2K12R2-KB3134758-x64.msu applies toG:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1AndW2K12R2-KB3134758-x64.msuTo finalize the install Update-WindowsImageWMF needs to create a vm and let it finish installing then run a AtStartup script to check the version of PowerShell to validate the install worked. and if so write a flag file. VERBOSE: [Update-WindowsImageWMF] : WMF : creating temp VM to finalize install onG:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: [createRunAndWaitVM] : Creating VM yary1ogs at 09/22/2016 17:15:55VERBOSE: [createRunAndWaitVM] : VM yary1ogs StopedVERBOSE: [createRunAndWaitVM] : VM yary1ogs Deleted at 09/22/2016 17:18:17If the flag file is detected then the child vhdx is merged back into the base. if not the child file id discarded and an error thrown VERBOSE: [Update-WindowsImageWMF] : WMF : Checking if changes madeVERBOSE: [Update-WindowsImageWMF] : WMF : Changes found : Merging G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Update.vhdx into G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_Base.vhdxI’m going to run the same command again on the other vhdx Update-WindowsImageWMF -Path G:\\Blog_Example\\ -ImageName Srv2012r2_Source -VerboseVERBOSE: Performing the operation \"Update WMF in Windows Image Tools Update Image\" on target \"G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Base.vhdx\".VERBOSE: [Update-WindowsImageWMF] : Creating G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdx from G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Base.vhdxVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF in G:\\Blog_Example\\\\Resource\\WMF\\5VERBOSE: GET https://www.microsoft.com/en-us/download/details.aspx?id=50395 with 0-byte payloadVERBOSE: received 107378-byte response of content type text/htmlVERBOSE: GET http://www.microsoft.com/en-us/download/confirmation.aspx?id=50395 with 0-byte payloadVERBOSE: received -1-byte response of content type text/htmlVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\W2K12-KB3134759-x64.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\W2K12-KB3134759-x64.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win7AndW2K8R2-KB3134760-x64.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win7AndW2K8R2-KB3134760-x64.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win7-KB3134760-x86.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win7-KB3134760-x86.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win8.1AndW2K12R2-KB3134758-x64.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win8.1AndW2K12R2-KB3134758-x64.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win8.1-KB3134758-x86.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for the latest WMF : G:\\Blog_Example\\\\Resource\\WMF\\5\\Win8.1-KB3134758-x86.msu : FoundVERBOSE: [Update-WindowsImageWMF] : Checking for .NET 4.6.1 installerVERBOSE: [Update-WindowsImageWMF] : .NET : Adding installer to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: [Update-WindowsImageWMF] : .NET : updateting AtStartup scriptVERBOSE: [Update-WindowsImageWMF] : .NET : Creating temp vm and waitingVERBOSE: [createRunAndWaitVM] : Creating VM dkdjxvqm at 09/23/2016 08:56:23VERBOSE: [createRunAndWaitVM] : VM dkdjxvqm StopedVERBOSE: [createRunAndWaitVM] : VM dkdjxvqm Deleted at 09/23/2016 09:12:39VERBOSE: [Update-WindowsImageWMF] : WMF : Applying WMF to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdx and Updating AtStartup scriptVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\W2K12-KB3134759-x64.msu applies to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\W2K12-KB3134759-x64.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win7-KB3134760-x86.msu applies to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win7-KB3134760-x86.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win7AndW2K8R2-KB3134760-x64.msu applies to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win7AndW2K8R2-KB3134760-x64.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1-KB3134758-x86.msu applies to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1-KB3134758-x86.msuVERBOSE: checking if G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1AndW2K12R2-KB3134758-x64.msu applies to G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: Target Image Version 6.3.9600.17031VERBOSE: Successfully added package G:\\Blog_Example\\Resource\\WMF\\5\\Win8.1AndW2K12R2-KB3134758-x64.msuVERBOSE: [Update-WindowsImageWMF] : WMF : creating temp VM to finalize install on G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: [createRunAndWaitVM] : Creating VM e5h2cc34 at 09/23/2016 09:15:50VERBOSE: [createRunAndWaitVM] : VM e5h2cc34 StopedVERBOSE: [createRunAndWaitVM] : VM e5h2cc34 Deleted at 09/23/2016 09:18:25VERBOSE: [Update-WindowsImageWMF] : WMF : Checking if changes madeVERBOSE: [Update-WindowsImageWMF] : WMF : Changes found : Merging G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Update.vhdx into G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Source_Base.vhdxNow I’m going to quickly check to make sure this worked. I dont want to make any changes to the drive as it is so I will create a child vhdx and boot it. New-VHD -Path G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_temp.vhdx -ParentPath G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_base.vhdxInvoke-CreateVmRunAndWait -VhdPath G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_temp.vhdx Remove-Item G:\\Blog_Example\\\\BaseImage\\Srv2012r2_Core_temp.vhdx checking the psversion table we see what is expected.  Dealing with 2008/Win7  WMF 5 on 2008 and Win7 need a few patches after WMF 4 is installed. So You want to run windows update before installing WMF 5 Next up. Windows update and output of WIM/VHDX ","categories": ["WindowsImageTools"],
        "tags": ["VHDX","WindowsUpdate","WindowsUpdateTools","Module"],
        "url": "https://blog.bladefirelight.com/windowsimagetools/Creating-an-Updateed-Image-Part2-WMF5/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Windows Image Tools \\| Creating an Updated Image Part 3",
        "excerpt":"Plan for today The end game is in site. Now that I have 2 images with WMF 5. it’s time to apply all the Windows Updates. Prerequisites If you are folowing along you shoudl have a WindowsImageTools Update directory with two images. A striped down Core image, and all you can eat GUI image for source. Kicking off Updates First off I’m going to run the updates. There are a nubmer of ways to do this, Invoke-WindowsUpdate can target individual images or all the images in our Update folders, and it can control the output.Because i’m doing source and small core images. I will update each image separately, and export the WIM only for the source, and shrink the Core Lets start with the source get-dateInvoke-WindowsImageUpdate -Path G:\\Blog_Example -output Both -ImageName Srv2012r2_Core -ReduceImageSize -Verboseget-dateInvoke-WindowsImageUpdate -Path G:\\Blog_Example -output WIM -ImageName Srv2012r2_Source -Verboseget-dateWednesday, October 12, 2016 12:26:17 AMVERBOSE: [Invoke-WindowsImageUpdate] : Validateing [Srv2012r2_Core]VERBOSE: [Invoke-WindowsImageUpdate] : Validateing VM switch configVERBOSE: Performing the operation \"Download required Modules\" on target \"PowerShell Gallery\".VERBOSE: Loading module from path 'C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\1.0.0.1\\PackageManagement.psd1'.VERBOSE: Loading 'FormatsToProcess' from path 'C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\1.0.0.1\\PackageManagement.format.ps1xml'.VERBOSE: Loading module from path 'C:\\Program Files\\WindowsPowerShell\\Modules\\PackageManagement\\1.0.0.1\\Microsoft.PowerShell.PackageManagement.dll'.VERBOSE: Exporting cmdlet 'Find-Package'.VERBOSE: Exporting cmdlet 'Get-Package'.VERBOSE: Exporting cmdlet 'Get-PackageProvider'.VERBOSE: Exporting cmdlet 'Get-PackageSource'.VERBOSE: Exporting cmdlet 'Install-Package'.VERBOSE: Exporting cmdlet 'Import-PackageProvider'.VERBOSE: Exporting cmdlet 'Find-PackageProvider'.VERBOSE: Exporting cmdlet 'Install-PackageProvider'.VERBOSE: Exporting cmdlet 'Register-PackageSource'.VERBOSE: Exporting cmdlet 'Save-Package'.VERBOSE: Exporting cmdlet 'Set-PackageSource'.VERBOSE: Exporting cmdlet 'Uninstall-Package'.VERBOSE: Exporting cmdlet 'Unregister-PackageSource'.VERBOSE: Importing cmdlet 'Find-Package'.VERBOSE: Importing cmdlet 'Find-PackageProvider'.VERBOSE: Importing cmdlet 'Get-Package'.VERBOSE: Importing cmdlet 'Get-PackageProvider'.VERBOSE: Importing cmdlet 'Get-PackageSource'.VERBOSE: Importing cmdlet 'Import-PackageProvider'.VERBOSE: Importing cmdlet 'Install-Package'.VERBOSE: Importing cmdlet 'Install-PackageProvider'.VERBOSE: Importing cmdlet 'Register-PackageSource'.VERBOSE: Importing cmdlet 'Save-Package'.VERBOSE: Importing cmdlet 'Set-PackageSource'.VERBOSE: Importing cmdlet 'Uninstall-Package'.VERBOSE: Importing cmdlet 'Unregister-PackageSource'.VERBOSE: [Invoke-WindowsImageUpdate] : Geting latest PSWindowsUpdateVERBOSE: Using the provider 'PowerShellGet' for searching packages.VERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='PSWindowsUpdate'' for ''.VERBOSE: Total package yield:'1' for the specified package 'PSWindowsUpdate'.VERBOSE: Performing the operation \"Save Package\" on target \"'PSWindowsUpdate' to location 'G:\\Blog_Example\\Resource\\Modules'\".VERBOSE: The specified module will be installed in 'G:\\Blog_Example\\Resource\\Modules'.VERBOSE: The specified Location is 'NuGet' and PackageManagementProvider is 'NuGet'.VERBOSE: Downloading module 'PSWindowsUpdate' with version '1.5.2.2' from the repository 'https://www.powershellgallery.com/api/v2/'.VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='PSWindowsUpdate'' for ''.VERBOSE: InstallPackage' - name='PSWindowsUpdate', version='1.5.2.2',destination='C:\\Users\\Blade_000\\AppData\\Local\\Temp\\239759536'VERBOSE: DownloadPackage' - name='PSWindowsUpdate', version='1.5.2.2',destination='C:\\Users\\Blade_000\\AppData\\Local\\Temp\\239759536\\PSWindowsUpdate\\PSWindowsUpdate.nupkg', uri='https://www.powershellgallery.com/api/v2/package/PSWindowsUpdate/1.5.2.2'VERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/PSWindowsUpdate/1.5.2.2'.VERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/PSWindowsUpdate/1.5.2.2'.VERBOSE: Completed downloading 'PSWindowsUpdate'.VERBOSE: Hash for package 'PSWindowsUpdate' does not match hash provided from the server.VERBOSE: InstallPackageLocal' - name='PSWindowsUpdate', version='1.5.2.2',destination='C:\\Users\\Blade_000\\AppData\\Local\\Temp\\239759536'VERBOSE: Module 'PSWindowsUpdate' was saved successfully to path 'G:\\Blog_Example\\Resource\\Modules\\PSWindowsUpdate\\1.5.2.2'.VERBOSE: Performing the operation \"Invoke Windows Updates on Image\" on target \"Srv2012r2_Core\".VERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : New Diff Disk : Creating G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_Update.vhdx from G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_base.vhdxVERBOSE: New-VHD will create a new virtual hard disk with the path \"G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_Update.vhdx\".VERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : Adding PSWindowsUpdate Module to G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_Update.vhdxVERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : updateting AtStartup scriptVERBOSE: Sidebyside detected in PSWindowsUpdate : switching to v4 compatabilityVERBOSE: [createRunAndWaitVM] : Creating VM 40floaow at 10/12/2016 00:26:34VERBOSE: [createRunAndWaitVM] : VM 40floaow StopedVERBOSE: [createRunAndWaitVM] : VM 40floaow Deleted at 10/12/2016 02:25:36VERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : Changes detected : Merging G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_Update.vhdx into G:\\Blog_Example\\BaseImage\\Srv2012r2_Core_base.vhdxVERBOSE: Merge-VHD will merge the virtual hard disk \"g:\\blog_example\\baseimage\\srv2012r2_core_update.vhdx\" into its parent \"g:\\blog_example\\baseimage\\srv2012r2_core_base.vhdx\".Wednesday, October 12, 2016 2:28:08 AMVERBOSE: [Invoke-WindowsImageUpdate] : Validateing [Srv2012r2_Source]VERBOSE: [Invoke-WindowsImageUpdate] : Validateing VM switch configVERBOSE: Performing the operation \"Download required Modules\" on target \"PowerShell Gallery\".VERBOSE: [Invoke-WindowsImageUpdate] : Geting latest PSWindowsUpdateVERBOSE: Using the provider 'PowerShellGet' for searching packages.VERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is 'NuGet'.VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='PSWindowsUpdate'' for ''.VERBOSE: Total package yield:'1' for the specified package 'PSWindowsUpdate'.VERBOSE: Performing the operation \"Save Package\" on target \"'PSWindowsUpdate' to location 'G:\\Blog_Example\\Resource\\Modules'\".VERBOSE: The specified module will be installed in 'G:\\Blog_Example\\Resource\\Modules'.VERBOSE: The specified Location is 'NuGet' and PackageManagementProvider is 'NuGet'.VERBOSE: Downloading module 'PSWindowsUpdate' with version '1.5.2.2' from the repository 'https://www.powershellgallery.com/api/v2/'.VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='PSWindowsUpdate'' for ''.VERBOSE: InstallPackage' - name='PSWindowsUpdate', version='1.5.2.2',destination='C:\\Users\\Blade_000\\AppData\\Local\\Temp\\1874556358'VERBOSE: DownloadPackage' - name='PSWindowsUpdate', version='1.5.2.2',destination='C:\\Users\\Blade_000\\AppData\\Local\\Temp\\1874556358\\PSWindowsUpdate\\PSWindowsUpdate.nupkg', uri='https://www.powershellgallery.com/api/v2/package/PSWindowsUpdate/1.5.2.2'VERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/PSWindowsUpdate/1.5.2.2'.VERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/PSWindowsUpdate/1.5.2.2'.VERBOSE: Completed downloading 'PSWindowsUpdate'.VERBOSE: Hash for package 'PSWindowsUpdate' does not match hash provided from the server.VERBOSE: InstallPackageLocal' - name='PSWindowsUpdate', version='1.5.2.2',destination='C:\\Users\\Blade_000\\AppData\\Local\\Temp\\1874556358'VERBOSE: Module 'PSWindowsUpdate' was saved successfully to path 'G:\\Blog_Example\\Resource\\Modules\\PSWindowsUpdate\\1.5.2.2'.VERBOSE: Performing the operation \"Invoke Windows Updates on Image\" on target \"Srv2012r2_Source\".VERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : New Diff Disk : Creating G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_Update.vhdx from G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_base.vhdxVERBOSE: New-VHD will create a new virtual hard disk with the path \"G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_Update.vhdx\".VERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : Adding PSWindowsUpdate Module to G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_Update.vhdxVERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : updateting AtStartup scriptVERBOSE: Sidebyside detected in PSWindowsUpdate : switching to v4 compatabilityVERBOSE: [createRunAndWaitVM] : Creating VM 5dvm2bu2 at 10/12/2016 02:28:24VERBOSE: [createRunAndWaitVM] : VM 5dvm2bu2 StopedVERBOSE: [createRunAndWaitVM] : VM 5dvm2bu2 Deleted at 10/12/2016 05:30:56VERBOSE: [Invoke-WindowsImageUpdate] : Windows Update : Changes detected : Merging G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_Update.vhdx into G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_base.vhdxVERBOSE: Merge-VHD will merge the virtual hard disk \"g:\\blog_example\\baseimage\\srv2012r2_source_update.vhdx\" into its parent \"g:\\blog_example\\baseimage\\srv2012r2_source_base.vhdx\".VERBOSE: [Invoke-WindowsImageUpdate] : SysPrep : New Diff Disk : Creating G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_Sysprep.vhdx from G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_base.vhdxVERBOSE: New-VHD will create a new virtual hard disk with the path \"G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_Sysprep.vhdx\".VERBOSE: [Invoke-WindowsImageUpdate] : SysPrep : updateting AtStartup scriptVERBOSE: [Invoke-WindowsImageUpdate] : SysPrep : Creating temp vm and waitingVERBOSE: [createRunAndWaitVM] : Creating VM 4nxvrw5x at 10/12/2016 05:34:45VERBOSE: [createRunAndWaitVM] : VM 4nxvrw5x StopedVERBOSE: [createRunAndWaitVM] : VM 4nxvrw5x Deleted at 10/12/2016 05:41:37VERBOSE: [Invoke-WindowsImageUpdate] : SysPrep : Removing PageFile and PsTempVERBOSE: [Invoke-WindowsImageUpdate] : SysPrep : Cleaning SxSVERBOSE: [Invoke-WindowsImageUpdate] : WIM : Creating G:\\Blog_Example\\UpdatedImageShare\\Srv2012r2_Source.wimVERBOSE: [Invoke-WindowsImageUpdate] : WIM : removing G:\\Blog_Example\\BaseImage\\Srv2012r2_Source_Sysprep.vhdxWednesday, October 12, 2016 6:19:52 AMAfter a few hours I have a a fully patched system. G:\\Blog_Example\\UpdatedImageShare    Directory: G:\\Blog_Example\\UpdatedImageShareMode                LastWriteTime         Length Name----                -------------         ------ -----a----        9/27/2016   3:24 PM     7541358592 Srv2012r2_Core.vhdx -a----        9/27/2016   3:14 PM     3415926982 Srv2012r2_Core.wim-a----        9/26/2016   6:36 PM     4523302203 Srv2012r2_Source.wim  ","categories": ["WindowsImageTools"],
        "tags": ["VHDX","WindowsUpdate","WindowsUpdateTools","Module"],
        "url": "https://blog.bladefirelight.com/windowsimagetools/Creating-an-Updateed-Image-Part3-Updates/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"},{
        "title": "Collecting CA Certificates for DSC Configuration",
        "excerpt":"The Goal Microsoft PFE Ashely McGlone recommends that each node managed by DSC (Desired State Configuration) have unique certificate for protecting credentials.  Starting in WMF 5.0 .MOF are encrypted at rest on the Node. But that is not the case for the file on the pull server. So I’m going on the assumption that this is still a best practice. The problem with that is getting the certificates either from the node or from a CA (Certificate Authority) to the DSC development workstation or CI/CD (Continuous Integration/Continuous Deployment) server. I’m going to cover one method. Pre-requisites For this I’m going to be using PowerShell Automated Lab Environment and it’s Configuration called “devops-powershell-fundamentals” This will generate the following:   DC1 - Domain Controller and Certificate Authority  S1, S2 - Member servers  N1 - Nano server (not used)  Cli1 - Windows 10 workstation  NAT virtual switch and static IP’s  Certificate Template called “DSC Template”  Auto-Enrollment GPOOnce that is up and running we can connect to cli1 via PowerShell Direct Demo I’m going to start with installing PKITools from the PowerShell Gallery  (and selecting Yes to install NuGet and allow use of untrusted rpo, this is new lab after all) Install-Module PKIToolsGet-Command -Module PkiToolsCommandType     Name                                               Version    Source-----------     ----                                               -------    ------Function        Get-ADCertificateTemplate                          1.6        PkiToolsFunction        Get-CaLocationString                               1.6        PkiToolsFunction        Get-CertificatAuthority                            1.6        PkiToolsFunction        Get-CertificateTemplateOID                         1.6        PkiToolsFunction        Get-IssuedCertificate                              1.6        PkiToolsThe one I want to focus on is Get-IssuedCertificate. As part of a DSC build process I want to collect the public certificates for each node. Pulling the certificate from each node is one option, but not practical in large network, and may not even be be possible due to lack of connectivity. Thankfully all the public certificates also reside on the Certificate Authority that issues them. In our lab there is only one domain and one CA (also the DC. no not do that in production) So the code will be simple. First lets look at the parameters. SYNTAX    Get-IssuedCertificate [[-ExpireInDays] &lt;Int32&gt;] [[-CAlocation] &lt;String[]&gt;] [[-Properties] &lt;String[]&gt;]    [[-CertificateTemplateOid] &lt;String&gt;] [[-CommonName] &lt;String&gt;] [[-Credential] &lt;PSCredential&gt;] [&lt;CommonParameters&gt;]No parameters are required. lets see what it does [hv01]: [Cli1]: PS C:\\&gt; Get-IssuedCertificateIssued Common Name          :Certificate Expiration Date : 4/18/2018 3:40:05 AMCertificate Effective Date  : 4/18/2017 3:40:05 AMCertificate Template        : 1.3.6.1.4.1.311.21.8.8376484.9891361.12404633.14452813.1016466.111.1.29Issued Request ID           : 2Certificate Hash            : f2 4e db 00 12 19 68 79 98 0b 6a 95 47 6d 7a c6 a7 40 e7 63Request Disposition Message : IssuedRequester Name              : COMPANY\\DC1$Binary Certificate          : -----BEGIN CERTIFICATE-----                              MIIF6jCCBNKgAwIBAgITUQAAAAL5xXyLo72OVAAAAAAAAjANBgkqhkiG9w0BAQsF                              ADBZMRAwDgYDVQQKEwdDb21wYW55MRAwDgYDVQQIEwdBcml6b25hMRAwDgYDVQQH                              EwdQaG9lbml4MQswCQYDVQQGEwJVUzEUMBIGA1UEAxMLQ29tcGFueS5QcmkwHhcN                              MTcwNDE4MDM0MDA1WhcNMTgwNDE4MDM0MDA1WjAAMIIBIjANBgkqhkiG9w0BAQEF                              AAOCAQ8AMIIBCgKCAQEAxjtOVDCixBoUEOWG1WKwPqw0DY77upmE0E4Bfc6CV94g                              X5ewYtagk7f8KvfigDaoq20qCNzFfaBprseL/0JoKPBY05Ws9O98pfAP639MGP6U                              MCbgXZ8ILhtoWZCqHi+S8UVyu7D2meyyl54IgeoVcb0MBISWoGyyJ5tzAWYX1XQL                              /0tnQ4YoWRcJulW7Qvn0kUhk6ooe9Mot4gCD0jPE/QjJ/loJDHO+aCRxsMwEil87                              KqGKfEcS54dV+g6wRhgxlrfi8b1NDwhKcpgglSzhtmBEUY72m1S5AxuL7V90ZxNU                              NQ/CBboy98NKri8RbmyvypAQ47MMyadVVmPLsAgGJwIDAQABo4IDAjCCAv4wNgYJ                              KwYBBAGCNxUHBCkwJwYfKwYBBAGCNxUIg/+hJITb3CGF9Y8ZhvKQTb6FEm8BHQIB                              cwIBADAUBgNVHSUEDTALBgkrBgEEAYI3FRMwDgYDVR0PAQH/BAQDAgWgMBwGCSsG                              AQQBgjcVCgQPMA0wCwYJKwYBBAGCNxUTMHgGCSqGSIb3DQEJDwRrMGkwDgYIKoZI                              hvcNAwICAgCAMA4GCCqGSIb3DQMEAgIAgDALBglghkgBZQMEASowCwYJYIZIAWUD                              BAEtMAsGCWCGSAFlAwQBAjALBglghkgBZQMEAQUwBwYFKw4DAgcwCgYIKoZIhvcN                              AwcwHQYDVR0OBBYEFOB1zbkBT8m9NW7DRh7xW13OjSmLMB8GA1UdIwQYMBaAFA+9                              p4ww6yyPs/vD4ugUNRM24pWIMIHFBgNVHR8Egb0wgbowgbeggbSggbGGga5sZGFw                              Oi8vL0NOPUNvbXBhbnkuUHJpLENOPURDMSxDTj1DRFAsQ049UHVibGljJTIwS2V5                              JTIwU2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlvbixEQz1Db21w                              YW55LERDPVByaT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0P2Jhc2U/b2JqZWN0                              Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnQwgb0GCCsGAQUFBwEBBIGwMIGtMIGq                              BggrBgEFBQcwAoaBnWxkYXA6Ly8vQ049Q29tcGFueS5QcmksQ049QUlBLENOPVB1                              YmxpYyUyMEtleSUyMFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNvbmZpZ3VyYXRp                              b24sREM9Q29tcGFueSxEQz1Qcmk/Y0FDZXJ0aWZpY2F0ZT9iYXNlP29iamVjdENs                              YXNzPWNlcnRpZmljYXRpb25BdXRob3JpdHkwPgYDVR0RAQH/BDQwMqAfBgkrBgEE                              AYI3GQGgEgQQezARELeYdUOiN2P2QTxNl4IPREMxLkNvbXBhbnkuUHJpMA0GCSqG                              SIb3DQEBCwUAA4IBAQBCV12I9eIaFLRFsgzbhMizfufvtCOI/EKAOsEYCxI9HFKJ                              H2HfC0lh7eEZABFQKPNx8XgCHCm5skzdR5oHLbtTwrnky2YJkFnuNOgTF/tuunoU                              p3+X0Kk3YH88wrv+YPE37PtqF/fJnZvEUzPfxRiaiOFaTisEIXfAxTvVYVBSwK9H                              oSgH5GTEblvlmiw6LD7JZYqrmYFCPQdB/mj+aOPjyeFClneGH2u8sxKCZHiJ/RWX                              wQJn8DO5ACctnLC8mH70HR5vVRJ0yFX6vrpnRyJEBSpawAYFK1vPf7Wks+gLSw4q                              g7ASEJG/MJK0oJpBosOKKGr+jMnEx6BTs1NJ3d0l                              -----END CERTIFICATE-----PSComputerName              : DC1.Company.PriRunspaceId                  : 146e5d7a-b85a-4540-9360-fea7413a9978Issued Common Name          :Certificate Expiration Date : 4/18/2018 3:40:07 AMCertificate Effective Date  : 4/18/2017 3:40:07 AMCertificate Template        : 1.3.6.1.4.1.311.21.8.8376484.9891361.12404633.14452813.1016466.111.1.28~~~~~~~~SNIP~~~~~~~~~~~~~                              BgkrBgEEAYI3UAEwHQYDVR0OBBYEFKYaQhzh28O8Sy4jBG5/63E59OzBMB8GA1Ud                              IwQYMBaAFA+9p4ww6yyPs/vD4ugUNRM24pWIMIHFBgNVHR8Egb0wgbowgbeggbSg                              gbGGga5sZGFwOi8vL0NOPUNvbXBhbnkuUHJpLENOPURDMSxDTj1DRFAsQ049UHVi                              bGljJTIwS2V5JTIwU2VydmljZXMsQ049U2VydmljZXMsQ049Q29uZmlndXJhdGlv                              bixEQz1Db21wYW55LERDPVByaT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0P2Jh                              c2U/b2JqZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnQwgb0GCCsGAQUFBwEB                              BIGwMIGtMIGqBggrBgEFBQcwAoaBnWxkYXA6Ly8vQ049Q29tcGFueS5QcmksQ049                              QUlBLENOPVB1YmxpYyUyMEtleSUyMFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNv                              bmZpZ3VyYXRpb24sREM9Q29tcGFueSxEQz1Qcmk/Y0FDZXJ0aWZpY2F0ZT9iYXNl                              P29iamVjdENsYXNzPWNlcnRpZmljYXRpb25BdXRob3JpdHkwGwYDVR0RBBQwEoIQ                              Q2xpMS5Db21wYW55LlByaTANBgkqhkiG9w0BAQsFAAOCAQEAFt8fD8dq7WdYxldl                              648SS8KkqEeqUv4cBXt5/GBLBO/Cr7JB1m5K8U3VrjzwMgyU4n01h0xeJxYeHIvA                              WZ1Fy8BXSzurH3MOcbC0jKuqezzXAJIpVAfkHB0UBKx+OnZes21aGXjb0ZHTv+lv                              3lx6Wrc051RD+eDDLz0/+kLU6MRgJHTO8qlgRDRjRSqU7dcU1TKFmpij1IzWjvJb                              GU2qHCfAnhWr8b+lMjvRMXkBxQjRF9kmMdhQxhR+nWN0/056wpr7/bukwGzPBKAU                              HfFNFXqNT8nc79rB7IW4T6xZteEm0zG/TTNpIjL74/MGDBzFG3MTDE3i6ks9DoF/                              9XDyDg==                              -----END CERTIFICATE-----PSComputerName              : DC1.Company.PriRunspaceId                  : 146e5d7a-b85a-4540-9360-fea7413a9978That got every issued certificate for every CA on the current domain. More then I need. Obviously we need to trim that down to just the DSC certificates. for that we will need to specify -CertificateTemplateOID. Lets look at the help for that parameter. [hv01]: [Cli1]: PS C:\\&gt; help Get-IssuedCertificate -Parameter CertificateTemplateOid-CertificateTemplateOid &lt;String&gt;    Filter on Certificate Template OID (use Get-CertificateTemplateOID)    Required?                    false    Position?                    4    Default value    Accept pipeline input?       false    Accept wildcard characters?  falseGood it has a function to get the OID lets look at that. SYNTAX    Get-CertificateTemplateOID [-Name] &lt;String&gt; [[-Domain] &lt;String&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]Only the -Name is required. That I know. [hv01]: [Cli1]: PS C:\\&gt; Get-CertificateTemplateOID DSCTemplate1.3.6.1.4.1.311.21.8.16187918.14945684.15749023.11519519.4925321.197.13392998.8282280And I though GUIDS were an eye full. Get-IssuedCertificate also has a -Propterties paramaters lets look at that. [hv01]: [Cli1]: PS C:\\&gt; help Get-IssuedCertificate -Parameter Properties-Properties &lt;String[]&gt;    Fields in the Certificate Authority Database to Export    Required?                    false    Position?                    3    Default value                (                'Issued Common Name',                'Certificate Expiration Date',                'Certificate Effective Date',                'Certificate Template',                #'Issued Email Address',                'Issued Request ID',                'Certificate Hash',                #'Request Disposition',                'Request Disposition Message',                'Requester Name',            'Binary Certificate' )    Accept pipeline input?       false    Accept wildcard characters?  falseFor collecting the Certificates I only need the ‘Issued Common Name’ and ‘Binary Certificate’ [hv01]: [Cli1]: PS C:\\&gt; $DSCCerts = Get-IssuedCertificate -CertificateTemplateOid (Get-CertificateTemplateOID -Name 'DSCTemplate') -Properties 'Issued Common Name', 'Binary Certificate'[hv01]: [Cli1]: PS C:\\&gt;[hv01]: [Cli1]: PS C:\\&gt; $DSCCerts.Count4So that got me 4 certs. Now I can step through each one and save them. [hv01]: [Cli1]: PS C:\\&gt; mkdir c:\\certs    Directory: C:\\Mode                LastWriteTime         Length Name----                -------------         ------ ----d-----        4/21/2017   7:12 AM                certs[hv01]: [Cli1]: PS C:\\&gt; foreach ($cert in $DSCCerts)&gt;&gt; {&gt;&gt;     set-content -path \"c:\\certs\\$($cert.'Issued Common Name').cer\" -Value $cert.'Binary Certificate' -Encoding Ascii&gt;&gt; }[hv01]: [Cli1]: PS C:\\&gt; dir c:\\certs    Directory: C:\\certsMode                LastWriteTime         Length Name----                -------------         ------ -----a----        4/21/2017   7:12 AM           1982 Cli1.Company.Pri.cer-a----        4/21/2017   7:12 AM           1978 DC1.Company.Pri.cer-a----        4/21/2017   7:12 AM           1972 S1.Company.Pri.cer-a----        4/21/2017   7:12 AM           1972 S2.Company.Pri.cerNow I have the certificate files for each node I can use for DSC. ","categories": ["Nuggets"],
        "tags": ["DSC","PKI"],
        "url": "https://blog.bladefirelight.com/nuggets/collecting-ca-certificates-for-dsc-configuration/",
        "teaser":"https://blog.bladefirelight.com/assets/images/default-teaser.png"}]
